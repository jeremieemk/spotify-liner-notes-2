{"ast":null,"code":"import { useEffect, useState } from \"react\";\nimport { Discojs } from 'discojs';\nexport default function useDiscogsData(spotifyData) {\n  const {\n    0: discogsData,\n    1: setDiscogsData\n  } = useState(null);\n  console.log(\"discogs API key\", process.env.NEXT_PUBLIC_DISCOGS_KEY);\n  useEffect(() => {\n    spotifyData && fetchDiscogsData(spotifyData, setDiscogsData);\n  }, [spotifyData]);\n\n  function fetchDiscogsData(spotifyData, setDiscogsData) {\n    const dicogsApi = new Discojs({\n      userToken: process.env.NEXT_PUBLIC_DISCOGS_KEY\n    });\n    const regex = /\\s*\\([^)]*\\)/g;\n    const currentTrack = spotifyData.name;\n    const cleanTrackName = currentTrack.includes(\"-\") ? currentTrack.replace(regex, \"\").replaceAll(\"&\", \"\").substring(0, currentTrack.indexOf(\"-\")) : currentTrack.replace(regex, \"\").replaceAll(\"&\", \"\");\n    const cleanArtistName = currentTrack.artists[0].replaceAll(\"&\", \"and\");\n    dicogsApi.searchDatabase({\n      // search uses only the first word of the artist name\n      // artist: spotifyTrackData.artists[0].name.replace(/ .*/, \"\"),\n      artist: cleanArtistName,\n      track: cleanTrackName,\n      type: \"release\"\n    }).then(data => {\n      console.log(\"discogs api data\", data); // checks if discogs search brings any result\n\n      if (data.results.length > 0) {\n        setDiscogsData(data.results);\n      } else {\n        console.log(\"no data\");\n      }\n    });\n  }\n\n  return discogsData;\n}","map":{"version":3,"sources":["/Users/jeremie/web/44_spotify-liner-notes2.0/pages/api/useDiscogsData.js"],"names":["useEffect","useState","Discojs","useDiscogsData","spotifyData","discogsData","setDiscogsData","console","log","process","env","NEXT_PUBLIC_DISCOGS_KEY","fetchDiscogsData","dicogsApi","userToken","regex","currentTrack","name","cleanTrackName","includes","replace","replaceAll","substring","indexOf","cleanArtistName","artists","searchDatabase","artist","track","type","then","data","results","length"],"mappings":"AAAA,SAASA,SAAT,EAAoBC,QAApB,QAAoC,OAApC;AACA,SAAQC,OAAR,QAAsB,SAAtB;AAEA,eAAe,SAASC,cAAT,CAAwBC,WAAxB,EAAqC;AAClD,QAAM;AAAA,OAACC,WAAD;AAAA,OAAcC;AAAd,MAAgCL,QAAQ,CAAC,IAAD,CAA9C;AACAM,EAAAA,OAAO,CAACC,GAAR,CAAY,iBAAZ,EAA+BC,OAAO,CAACC,GAAR,CAAYC,uBAA3C;AAEAX,EAAAA,SAAS,CAAC,MAAM;AACdI,IAAAA,WAAW,IAAIQ,gBAAgB,CAACR,WAAD,EAAcE,cAAd,CAA/B;AACD,GAFQ,EAEN,CAACF,WAAD,CAFM,CAAT;;AAIA,WAASQ,gBAAT,CAA0BR,WAA1B,EAAuCE,cAAvC,EAAuD;AACrD,UAAMO,SAAS,GAAG,IAAIX,OAAJ,CAAY;AAC5BY,MAAAA,SAAS,EAAEL,OAAO,CAACC,GAAR,CAAYC;AADK,KAAZ,CAAlB;AAGA,UAAMI,KAAK,GAAG,eAAd;AACA,UAAMC,YAAY,GAAGZ,WAAW,CAACa,IAAjC;AAEA,UAAMC,cAAc,GAAGF,YAAY,CAACG,QAAb,CAAsB,GAAtB,IACrBH,YAAY,CACTI,OADH,CACWL,KADX,EACkB,EADlB,EAEGM,UAFH,CAEc,GAFd,EAEmB,EAFnB,EAGGC,SAHH,CAGa,CAHb,EAGgBN,YAAY,CAACO,OAAb,CAAqB,GAArB,CAHhB,CADqB,GAKrBP,YAAY,CACTI,OADH,CACWL,KADX,EACkB,EADlB,EAEGM,UAFH,CAEc,GAFd,EAEmB,EAFnB,CALF;AASA,UAAMG,eAAe,GAAGR,YAAY,CAACS,OAAb,CAAqB,CAArB,EAAwBJ,UAAxB,CAAmC,GAAnC,EAAwC,KAAxC,CAAxB;AAEAR,IAAAA,SAAS,CACNa,cADH,CACkB;AACd;AACA;AACAC,MAAAA,MAAM,EAAEH,eAHM;AAIdI,MAAAA,KAAK,EAAEV,cAJO;AAKdW,MAAAA,IAAI,EAAE;AALQ,KADlB,EAQGC,IARH,CAQSC,IAAD,IAAU;AACdxB,MAAAA,OAAO,CAACC,GAAR,CAAY,kBAAZ,EAAgCuB,IAAhC,EADc,CAEd;;AACA,UAAIA,IAAI,CAACC,OAAL,CAAaC,MAAb,GAAsB,CAA1B,EAA6B;AAC3B3B,QAAAA,cAAc,CAACyB,IAAI,CAACC,OAAN,CAAd;AACD,OAFD,MAEO;AACLzB,QAAAA,OAAO,CAACC,GAAR,CAAY,SAAZ;AACD;AACF,KAhBH;AAiBD;;AAED,SAAOH,WAAP;AACD","sourcesContent":["import { useEffect, useState } from \"react\";\nimport {Discojs} from 'discojs';\n\nexport default function useDiscogsData(spotifyData) {\n  const [discogsData, setDiscogsData] = useState(null);\n  console.log(\"discogs API key\", process.env.NEXT_PUBLIC_DISCOGS_KEY)\n\n  useEffect(() => {\n    spotifyData && fetchDiscogsData(spotifyData, setDiscogsData)\n  }, [spotifyData]);\n\n  function fetchDiscogsData(spotifyData, setDiscogsData) {\n    const dicogsApi = new Discojs({\n      userToken: process.env.NEXT_PUBLIC_DISCOGS_KEY,\n    });\n    const regex = /\\s*\\([^)]*\\)/g;\n    const currentTrack = spotifyData.name\n\n    const cleanTrackName = currentTrack.includes(\"-\") ?\n      currentTrack\n        .replace(regex, \"\")\n        .replaceAll(\"&\", \"\")\n        .substring(0, currentTrack.indexOf(\"-\")) :\n      currentTrack\n        .replace(regex, \"\")\n        .replaceAll(\"&\", \"\")\n\n    const cleanArtistName = currentTrack.artists[0].replaceAll(\"&\", \"and\")\n\n    dicogsApi\n      .searchDatabase({\n        // search uses only the first word of the artist name\n        // artist: spotifyTrackData.artists[0].name.replace(/ .*/, \"\"),\n        artist: cleanArtistName,\n        track: cleanTrackName,\n        type: \"release\",\n      })\n      .then((data) => {\n        console.log(\"discogs api data\", data)\n        // checks if discogs search brings any result\n        if (data.results.length > 0) {\n          setDiscogsData(data.results)\n        } else {\n          console.log(\"no data\")\n        }\n      });\n  }\n\n  return discogsData\n}"]},"metadata":{},"sourceType":"module"}