{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { useEffect, useState } from \"react\";\nexport default function useSpotifyData(accessToken) {\n  const {\n    0: spotifyData,\n    1: setSpotifyData\n  } = useState(null);\n  useEffect(() => {\n    accessToken && fetchCurrentTrack(accessToken, setSpotifyData);\n  }, [accessToken]);\n\n  function fetchCurrentTrack(accessToken, setSpotifyData) {\n    const nowPlayingApiUrl = \"https://api.spotify.com/v1/me/player\";\n    fetch(nowPlayingApiUrl, {\n      headers: {\n        Authorization: \"Bearer \" + accessToken\n      }\n    }).then(response => {\n      if (response.status === 204 || response.status === 401) {\n        console.log(response);\n        console.log(\"manage error\");\n      } else {\n        return response.json();\n      }\n    }).then(data => {\n      setSpotifyData(_objectSpread(_objectSpread({}, spotifyData), {}, {\n        rawData: data.item\n      }));\n    }).catch(function (error) {\n      console.log(error);\n    });\n  }\n\n  return spotifyData;\n}","map":{"version":3,"sources":["/Users/jeremie/web/44_spotify-liner-notes2.0/pages/api/useSpotifyData.js"],"names":["useEffect","useState","useSpotifyData","accessToken","spotifyData","setSpotifyData","fetchCurrentTrack","nowPlayingApiUrl","fetch","headers","Authorization","then","response","status","console","log","json","data","rawData","item","catch","error"],"mappings":";;;;;;AAAA,SAASA,SAAT,EAAoBC,QAApB,QAAoC,OAApC;AAEA,eAAe,SAASC,cAAT,CAAwBC,WAAxB,EAAqC;AAClD,QAAM;AAAA,OAACC,WAAD;AAAA,OAAcC;AAAd,MAAgCJ,QAAQ,CAAC,IAAD,CAA9C;AACAD,EAAAA,SAAS,CAAC,MAAM;AACdG,IAAAA,WAAW,IAAIG,iBAAiB,CAACH,WAAD,EAAcE,cAAd,CAAhC;AACD,GAFQ,EAEN,CAACF,WAAD,CAFM,CAAT;;AAIA,WAASG,iBAAT,CAA2BH,WAA3B,EAAwCE,cAAxC,EAAwD;AACtD,UAAME,gBAAgB,GAAG,sCAAzB;AACAC,IAAAA,KAAK,CAACD,gBAAD,EAAmB;AACtBE,MAAAA,OAAO,EAAE;AAAEC,QAAAA,aAAa,EAAE,YAAYP;AAA7B;AADa,KAAnB,CAAL,CAGGQ,IAHH,CAGSC,QAAD,IAAc;AAClB,UAAIA,QAAQ,CAACC,MAAT,KAAoB,GAApB,IAA2BD,QAAQ,CAACC,MAAT,KAAoB,GAAnD,EAAwD;AACtDC,QAAAA,OAAO,CAACC,GAAR,CAAYH,QAAZ;AACAE,QAAAA,OAAO,CAACC,GAAR,CAAY,cAAZ;AACD,OAHD,MAGO;AACL,eAAOH,QAAQ,CAACI,IAAT,EAAP;AACD;AACF,KAVH,EAWGL,IAXH,CAWSM,IAAD,IAAU;AACdZ,MAAAA,cAAc,iCAAMD,WAAN;AAAmBc,QAAAA,OAAO,EAAED,IAAI,CAACE;AAAjC,SAAd;AACD,KAbH,EAcGC,KAdH,CAcS,UAAUC,KAAV,EAAiB;AACtBP,MAAAA,OAAO,CAACC,GAAR,CAAYM,KAAZ;AACD,KAhBH;AAiBD;;AAED,SAAOjB,WAAP;AACD","sourcesContent":["import { useEffect, useState } from \"react\";\n\nexport default function useSpotifyData(accessToken) {\n  const [spotifyData, setSpotifyData] = useState(null);\n  useEffect(() => {\n    accessToken && fetchCurrentTrack(accessToken, setSpotifyData);\n  }, [accessToken]);\n\n  function fetchCurrentTrack(accessToken, setSpotifyData) {\n    const nowPlayingApiUrl = \"https://api.spotify.com/v1/me/player\";\n    fetch(nowPlayingApiUrl, {\n      headers: { Authorization: \"Bearer \" + accessToken },\n    })\n      .then((response) => {\n        if (response.status === 204 || response.status === 401) {\n          console.log(response);\n          console.log(\"manage error\");\n        } else {\n          return response.json();\n        }\n      })\n      .then((data) => {\n        setSpotifyData({ ...spotifyData, rawData: data.item });\n      })\n      .catch(function (error) {\n        console.log(error);\n      });\n  }\n\n  return spotifyData;\n}\n"]},"metadata":{},"sourceType":"module"}