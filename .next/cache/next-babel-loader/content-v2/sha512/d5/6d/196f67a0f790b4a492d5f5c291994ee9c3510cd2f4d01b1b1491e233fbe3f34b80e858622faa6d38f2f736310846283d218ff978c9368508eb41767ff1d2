{"ast":null,"code":"import { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/Users/jeremie/web/44_spotify-liner-notes2.0/pages/components/ReleaseDetails.js\";\nimport React from \"react\";\nexport default function Hello(props) {\n  var _this2 = this;\n\n  console.log(props);\n  var discogsData = props.discogsData,\n      spotifyData = props.spotifyData;\n\n  function addComa(i) {\n    return spotifyData.artists.length > 1 && i < spotifyData.artists.length - 1;\n  }\n\n  discogsData && console.log(discogsData[0].cover_image);\n\n  function renderArtists() {\n    var _this = this;\n\n    return spotifyData.artists.map(function (artist, i) {\n      return /*#__PURE__*/_jsxDEV(\"span\", {\n        children: [artist.name, addComa(i) && \", \"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 14,\n        columnNumber: 7\n      }, _this);\n    });\n  }\n\n  return spotifyData && discogsData && /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: [renderArtists(), \" - \", spotifyData.name]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 25,\n      columnNumber: 9\n    }, this), discogsData.map(function (release) {\n      return /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n          children: [release.title, \" - \", release.year, \" - \", release.label[0]]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 31,\n          columnNumber: 15\n        }, _this2), /*#__PURE__*/_jsxDEV(\"img\", {\n          src: release.cover_image,\n          alt: \"\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 34,\n          columnNumber: 15\n        }, _this2)]\n      }, void 0, true);\n    }), /*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"hello\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 24,\n    columnNumber: 7\n  }, this);\n}\n_c = Hello;\n\nvar _c;\n\n$RefreshReg$(_c, \"Hello\");","map":{"version":3,"sources":["/Users/jeremie/web/44_spotify-liner-notes2.0/pages/components/ReleaseDetails.js"],"names":["React","Hello","props","console","log","discogsData","spotifyData","addComa","i","artists","length","cover_image","renderArtists","map","artist","name","release","title","year","label"],"mappings":";;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AAEA,eAAe,SAASC,KAAT,CAAeC,KAAf,EAAsB;AAAA;;AACnCC,EAAAA,OAAO,CAACC,GAAR,CAAYF,KAAZ;AADmC,MAE3BG,WAF2B,GAEEH,KAFF,CAE3BG,WAF2B;AAAA,MAEdC,WAFc,GAEEJ,KAFF,CAEdI,WAFc;;AAInC,WAASC,OAAT,CAAiBC,CAAjB,EAAoB;AAClB,WAAOF,WAAW,CAACG,OAAZ,CAAoBC,MAApB,GAA6B,CAA7B,IAAkCF,CAAC,GAAGF,WAAW,CAACG,OAAZ,CAAoBC,MAApB,GAA6B,CAA1E;AACD;;AAEDL,EAAAA,WAAW,IAAIF,OAAO,CAACC,GAAR,CAAYC,WAAW,CAAC,CAAD,CAAX,CAAeM,WAA3B,CAAf;;AACA,WAASC,aAAT,GAAyB;AAAA;;AACvB,WAAON,WAAW,CAACG,OAAZ,CAAoBI,GAApB,CAAwB,UAACC,MAAD,EAASN,CAAT;AAAA,0BAC7B;AAAA,mBACGM,MAAM,CAACC,IADV,EAEGR,OAAO,CAACC,CAAD,CAAP,QAFH;AAAA;AAAA;AAAA;AAAA;AAAA,eAD6B;AAAA,KAAxB,CAAP;AAMD;;AAED,SACEF,WAAW,IACXD,WADA,iBAEE;AAAA,4BACE;AAAA,iBACGO,aAAa,EADhB,SACuBN,WAAW,CAACS,IADnC;AAAA;AAAA;AAAA;AAAA;AAAA,YADF,EAIGV,WAAW,CAACQ,GAAZ,CAAgB,UAACG,OAAD,EAAa;AAC5B,0BACE;AAAA,gCACE;AAAA,qBACGA,OAAO,CAACC,KADX,SACqBD,OAAO,CAACE,IAD7B,SACsCF,OAAO,CAACG,KAAR,CAAc,CAAd,CADtC;AAAA;AAAA;AAAA;AAAA;AAAA,kBADF,eAIE;AAAK,UAAA,GAAG,EAAEH,OAAO,CAACL,WAAlB;AAA+B,UAAA,GAAG,EAAC;AAAnC;AAAA;AAAA;AAAA;AAAA,kBAJF;AAAA,sBADF;AAQD,KATA,CAJH,eAcE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAdF;AAAA;AAAA;AAAA;AAAA;AAAA,UAHJ;AAqBD;KAvCuBV,K","sourcesContent":["import React from \"react\";\n\nexport default function Hello(props) {\n  console.log(props);\n  const { discogsData, spotifyData } = props;\n\n  function addComa(i) {\n    return spotifyData.artists.length > 1 && i < spotifyData.artists.length - 1;\n  }\n\n  discogsData && console.log(discogsData[0].cover_image);\n  function renderArtists() {\n    return spotifyData.artists.map((artist, i) => (\n      <span>\n        {artist.name}\n        {addComa(i) && `, `}\n      </span>\n    ));\n  }\n\n  return (\n    spotifyData &&\n    discogsData && (\n      <div>\n        <h1>\n          {renderArtists()} - {spotifyData.name}\n        </h1>\n        {discogsData.map((release) => {\n          return (\n            <>\n              <h1>\n                {release.title} - {release.year} - {release.label[0]}\n              </h1>\n              <img src={release.cover_image} alt=\"\" />\n            </>\n          );\n        })}\n        <h1>hello</h1>\n      </div>\n    )\n  );\n}\n"]},"metadata":{},"sourceType":"module"}