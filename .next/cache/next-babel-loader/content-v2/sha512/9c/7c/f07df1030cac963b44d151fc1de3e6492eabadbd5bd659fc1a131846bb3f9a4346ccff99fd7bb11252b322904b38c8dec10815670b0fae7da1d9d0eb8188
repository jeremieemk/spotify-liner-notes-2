{"ast":null,"code":"import { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/Users/jeremie/web/44_spotify-liner-notes2.0/pages/components/ReleaseDetails/index.js\";\nimport React from \"react\";\nimport Image from \"next/image\";\nimport ArtistBio from \"./ArtistBio\";\nimport Lyrics from \"./Lyrics\";\nexport default function ReleaseDetails(props) {\n  const {\n    discogsData,\n    spotifyData,\n    songLyrics\n  } = props;\n  console.log(\"props\", props);\n\n  function renderArtists() {\n    return spotifyData.artists.map(artist => artist.name).join(\", \");\n  }\n\n  const orderedReleaselist = discogsData && discogsData.sort((a, b) => {\n    return b.community.want - a.community.want;\n  }).slice(0, 10);\n  console.log(\"ordered list\", orderedReleaselist);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(Image, {\n      src: spotifyData.album.images[0].url,\n      alt: \"\",\n      width: 500,\n      height: 500\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 25,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"h1\", {\n      children: [renderArtists(), \" - \", spotifyData.name]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 31,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(ArtistBio, {\n      artistBio: props.artistBio\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 34,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Lyrics, {\n      songLyrics: props.songLyrics\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 7\n    }, this), discogsData && orderedReleaselist.map(release => {\n      return /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n          children: [release.title, \" - \", release.year, \" - \", release.label[0]]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 40,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          children: [release.country, \" -\", \" \", release.format.map(format => /*#__PURE__*/_jsxDEV(\"span\", {\n            children: format\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 46,\n            columnNumber: 19\n          }, this))]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 43,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(\"img\", {\n          src: release.cover_image,\n          alt: \"\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 49,\n          columnNumber: 15\n        }, this)]\n      }, void 0, true);\n    }), /*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"hello\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 24,\n    columnNumber: 5\n  }, this);\n}","map":{"version":3,"sources":["/Users/jeremie/web/44_spotify-liner-notes2.0/pages/components/ReleaseDetails/index.js"],"names":["React","Image","ArtistBio","Lyrics","ReleaseDetails","props","discogsData","spotifyData","songLyrics","console","log","renderArtists","artists","map","artist","name","join","orderedReleaselist","sort","a","b","community","want","slice","album","images","url","artistBio","release","title","year","label","country","format","cover_image"],"mappings":";;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,KAAP,MAAkB,YAAlB;AACA,OAAOC,SAAP,MAAsB,aAAtB;AACA,OAAOC,MAAP,MAAmB,UAAnB;AAEA,eAAe,SAASC,cAAT,CAAwBC,KAAxB,EAA+B;AAC5C,QAAM;AAAEC,IAAAA,WAAF;AAAeC,IAAAA,WAAf;AAA4BC,IAAAA;AAA5B,MAA2CH,KAAjD;AACAI,EAAAA,OAAO,CAACC,GAAR,CAAY,OAAZ,EAAqBL,KAArB;;AAEA,WAASM,aAAT,GAAyB;AACvB,WAAOJ,WAAW,CAACK,OAAZ,CAAoBC,GAApB,CAAyBC,MAAD,IAAYA,MAAM,CAACC,IAA3C,EAAiDC,IAAjD,CAAsD,IAAtD,CAAP;AACD;;AAED,QAAMC,kBAAkB,GACtBX,WAAW,IACXA,WAAW,CACRY,IADH,CACQ,CAACC,CAAD,EAAIC,CAAJ,KAAU;AACd,WAAOA,CAAC,CAACC,SAAF,CAAYC,IAAZ,GAAmBH,CAAC,CAACE,SAAF,CAAYC,IAAtC;AACD,GAHH,EAIGC,KAJH,CAIS,CAJT,EAIY,EAJZ,CAFF;AAQAd,EAAAA,OAAO,CAACC,GAAR,CAAY,cAAZ,EAA4BO,kBAA5B;AACA,sBACE;AAAA,4BACE,QAAC,KAAD;AACE,MAAA,GAAG,EAAEV,WAAW,CAACiB,KAAZ,CAAkBC,MAAlB,CAAyB,CAAzB,EAA4BC,GADnC;AAEE,MAAA,GAAG,EAAC,EAFN;AAGE,MAAA,KAAK,EAAE,GAHT;AAIE,MAAA,MAAM,EAAE;AAJV;AAAA;AAAA;AAAA;AAAA,YADF,eAOE;AAAA,iBACGf,aAAa,EADhB,SACuBJ,WAAW,CAACQ,IADnC;AAAA;AAAA;AAAA;AAAA;AAAA,YAPF,eAUE,QAAC,SAAD;AAAW,MAAA,SAAS,EAAEV,KAAK,CAACsB;AAA5B;AAAA;AAAA;AAAA;AAAA,YAVF,eAWE,QAAC,MAAD;AAAQ,MAAA,UAAU,EAAEtB,KAAK,CAACG;AAA1B;AAAA;AAAA;AAAA;AAAA,YAXF,EAYGF,WAAW,IACVW,kBAAkB,CAACJ,GAAnB,CAAwBe,OAAD,IAAa;AAClC,0BACE;AAAA,gCACE;AAAA,qBACGA,OAAO,CAACC,KADX,SACqBD,OAAO,CAACE,IAD7B,SACsCF,OAAO,CAACG,KAAR,CAAc,CAAd,CADtC;AAAA;AAAA;AAAA;AAAA;AAAA,gBADF,eAIE;AAAA,qBACGH,OAAO,CAACI,OADX,QACsB,GADtB,EAEGJ,OAAO,CAACK,MAAR,CAAepB,GAAf,CAAoBoB,MAAD,iBAClB;AAAA,sBAAOA;AAAP;AAAA;AAAA;AAAA;AAAA,kBADD,CAFH;AAAA;AAAA;AAAA;AAAA;AAAA,gBAJF,eAUE;AAAK,UAAA,GAAG,EAAEL,OAAO,CAACM,WAAlB;AAA+B,UAAA,GAAG,EAAC;AAAnC;AAAA;AAAA;AAAA;AAAA,gBAVF;AAAA,sBADF;AAcD,KAfD,CAbJ,eA6BE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YA7BF;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AAiCD","sourcesContent":["import React from \"react\";\nimport Image from \"next/image\";\nimport ArtistBio from \"./ArtistBio\";\nimport Lyrics from \"./Lyrics\";\n\nexport default function ReleaseDetails(props) {\n  const { discogsData, spotifyData, songLyrics } = props;\n  console.log(\"props\", props);\n\n  function renderArtists() {\n    return spotifyData.artists.map((artist) => artist.name).join(\", \");\n  }\n\n  const orderedReleaselist =\n    discogsData &&\n    discogsData\n      .sort((a, b) => {\n        return b.community.want - a.community.want;\n      })\n      .slice(0, 10);\n\n  console.log(\"ordered list\", orderedReleaselist);\n  return (\n    <div>\n      <Image\n        src={spotifyData.album.images[0].url}\n        alt=\"\"\n        width={500}\n        height={500}\n      />\n      <h1>\n        {renderArtists()} - {spotifyData.name}\n      </h1>\n      <ArtistBio artistBio={props.artistBio} />\n      <Lyrics songLyrics={props.songLyrics} />\n      {discogsData &&\n        orderedReleaselist.map((release) => {\n          return (\n            <>\n              <h3>\n                {release.title} - {release.year} - {release.label[0]}\n              </h3>\n              <div>\n                {release.country} -{\" \"}\n                {release.format.map((format) => (\n                  <span>{format}</span>\n                ))}\n              </div>\n              <img src={release.cover_image} alt=\"\" />\n            </>\n          );\n        })}\n      <h1>hello</h1>\n    </div>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}