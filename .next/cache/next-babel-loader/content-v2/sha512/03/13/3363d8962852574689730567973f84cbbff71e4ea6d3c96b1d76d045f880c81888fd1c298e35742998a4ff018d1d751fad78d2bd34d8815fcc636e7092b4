{"ast":null,"code":"export default function getCleanTrackDetails(spotifyData) {\n  const regex = /\\s*\\([^)]*\\)/g;\n  const cleanTrackName = spotifyData.name.includes(\"-\") ? spotifyData.name.replace(regex, \"\").replaceAll(\"&\", \"\").substring(0, spotifyData.name.indexOf(\"-\")) : spotifyData.name.replace(regex, \"\").replaceAll(\"&\", \"\");\n  const cleanArtistName = spotifyData.artists[0].name.replaceAll(\"&\", \"and\");\n  return {\n    artist: cleanArtistName,\n    song: cleanTrackName\n  };\n}","map":{"version":3,"sources":["/Users/jeremie/web/44_spotify-liner-notes2.0/pages/api/getCleanTrackDetails.js"],"names":["getCleanTrackDetails","spotifyData","regex","cleanTrackName","name","includes","replace","replaceAll","substring","indexOf","cleanArtistName","artists","artist","song"],"mappings":"AAAA,eAAe,SAASA,oBAAT,CAA8BC,WAA9B,EAA2C;AACxD,QAAMC,KAAK,GAAG,eAAd;AACA,QAAMC,cAAc,GAAGF,WAAW,CAACG,IAAZ,CAAiBC,QAAjB,CAA0B,GAA1B,IACnBJ,WAAW,CAACG,IAAZ,CACGE,OADH,CACWJ,KADX,EACkB,EADlB,EAEGK,UAFH,CAEc,GAFd,EAEmB,EAFnB,EAGGC,SAHH,CAGa,CAHb,EAGgBP,WAAW,CAACG,IAAZ,CAAiBK,OAAjB,CAAyB,GAAzB,CAHhB,CADmB,GAKnBR,WAAW,CAACG,IAAZ,CAAiBE,OAAjB,CAAyBJ,KAAzB,EAAgC,EAAhC,EAAoCK,UAApC,CAA+C,GAA/C,EAAoD,EAApD,CALJ;AAOA,QAAMG,eAAe,GAAGT,WAAW,CAACU,OAAZ,CAAoB,CAApB,EAAuBP,IAAvB,CAA4BG,UAA5B,CAAuC,GAAvC,EAA4C,KAA5C,CAAxB;AACA,SAAO;AAAEK,IAAAA,MAAM,EAAEF,eAAV;AAA2BG,IAAAA,IAAI,EAAEV;AAAjC,GAAP;AACD","sourcesContent":["export default function getCleanTrackDetails(spotifyData) {\n  const regex = /\\s*\\([^)]*\\)/g;\n  const cleanTrackName = spotifyData.name.includes(\"-\")\n    ? spotifyData.name\n        .replace(regex, \"\")\n        .replaceAll(\"&\", \"\")\n        .substring(0, spotifyData.name.indexOf(\"-\"))\n    : spotifyData.name.replace(regex, \"\").replaceAll(\"&\", \"\");\n\n  const cleanArtistName = spotifyData.artists[0].name.replaceAll(\"&\", \"and\");\n  return { artist: cleanArtistName, song: cleanTrackName };\n}\n"]},"metadata":{},"sourceType":"module"}