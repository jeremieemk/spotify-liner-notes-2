{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useEffect, useState } from \"react\";\nimport { Discojs } from \"discojs\";\nexport default function useDiscogsData(spotifyData) {\n  _s();\n\n  var _useState = useState(null),\n      discogsData = _useState[0],\n      setDiscogsData = _useState[1];\n\n  console.log(\"discogs API key\", process.env.NEXT_PUBLIC_DISCOGS_KEY);\n  var dicogsApi = new Discojs({\n    userToken: process.env.NEXT_PUBLIC_DISCOGS_KEY\n  });\n  useEffect(function () {\n    spotifyData && fetchDiscogsData(spotifyData, setDiscogsData);\n  }, [spotifyData]);\n\n  function fetchDiscogsData(spotifyData, setDiscogsData) {\n    var regex = /\\s*\\([^)]*\\)/g;\n    var currentTrack = spotifyData;\n    var cleanTrackName = currentTrack.name.includes(\"-\") ? currentTrack.name.replace(regex, \"\").replaceAll(\"&\", \"\").substring(0, currentTrack.name.indexOf(\"-\")) : currentTrack.name.replace(regex, \"\").replaceAll(\"&\", \"\");\n    var cleanArtistName = currentTrack.artists[0].name.replaceAll(\"&\", \"and\");\n    dicogsApi.searchDatabase({\n      artist: cleanArtistName,\n      track: cleanTrackName,\n      type: \"release\"\n    }).then(function (data) {\n      console.log(\"discogs api data\", data); // checks if discogs search brings any result\n\n      if (data.results.length > 0) {\n        setDiscogsData(data.results);\n      } else {\n        console.log(\"no data\");\n      }\n    });\n    dicogsApi.getRelease(4387601).then(function (data) {\n      console.log(\"discogs master data\", data);\n    });\n  } // useEffect(() => {\n  //   if (discogsData) {\n  //     const releaseIds = discogsData.map((release) => release.id);\n  //     console.log(\"ids\", releaseIds);\n  //     const releasesDetails = releaseIds.map(function (id) {\n  //       dicogsApi.getRelease(id).then((data) => {\n  //         console.log(\"inside map\", data);\n  //         return data;\n  //       });\n  //     });\n  //     console.log(releasesDetails);\n  //   }\n  // }\n  //  , [discogsData]);\n\n\n  return discogsData;\n}\n\n_s(useDiscogsData, \"yzHMHPZkUAIxMeyy5PV0im/CSMY=\");","map":{"version":3,"sources":["/Users/jeremie/web/44_spotify-liner-notes2.0/pages/api/useDiscogsData.js"],"names":["useEffect","useState","Discojs","useDiscogsData","spotifyData","discogsData","setDiscogsData","console","log","process","env","NEXT_PUBLIC_DISCOGS_KEY","dicogsApi","userToken","fetchDiscogsData","regex","currentTrack","cleanTrackName","name","includes","replace","replaceAll","substring","indexOf","cleanArtistName","artists","searchDatabase","artist","track","type","then","data","results","length","getRelease"],"mappings":";;AAAA,SAASA,SAAT,EAAoBC,QAApB,QAAoC,OAApC;AACA,SAASC,OAAT,QAAwB,SAAxB;AAEA,eAAe,SAASC,cAAT,CAAwBC,WAAxB,EAAqC;AAAA;;AAAA,kBACZH,QAAQ,CAAC,IAAD,CADI;AAAA,MAC3CI,WAD2C;AAAA,MAC9BC,cAD8B;;AAElDC,EAAAA,OAAO,CAACC,GAAR,CAAY,iBAAZ,EAA+BC,OAAO,CAACC,GAAR,CAAYC,uBAA3C;AAEA,MAAMC,SAAS,GAAG,IAAIV,OAAJ,CAAY;AAC5BW,IAAAA,SAAS,EAAEJ,OAAO,CAACC,GAAR,CAAYC;AADK,GAAZ,CAAlB;AAIAX,EAAAA,SAAS,CAAC,YAAM;AACdI,IAAAA,WAAW,IAAIU,gBAAgB,CAACV,WAAD,EAAcE,cAAd,CAA/B;AACD,GAFQ,EAEN,CAACF,WAAD,CAFM,CAAT;;AAIA,WAASU,gBAAT,CAA0BV,WAA1B,EAAuCE,cAAvC,EAAuD;AACrD,QAAMS,KAAK,GAAG,eAAd;AACA,QAAMC,YAAY,GAAGZ,WAArB;AAEA,QAAMa,cAAc,GAAGD,YAAY,CAACE,IAAb,CAAkBC,QAAlB,CAA2B,GAA3B,IACnBH,YAAY,CAACE,IAAb,CACGE,OADH,CACWL,KADX,EACkB,EADlB,EAEGM,UAFH,CAEc,GAFd,EAEmB,EAFnB,EAGGC,SAHH,CAGa,CAHb,EAGgBN,YAAY,CAACE,IAAb,CAAkBK,OAAlB,CAA0B,GAA1B,CAHhB,CADmB,GAKnBP,YAAY,CAACE,IAAb,CAAkBE,OAAlB,CAA0BL,KAA1B,EAAiC,EAAjC,EAAqCM,UAArC,CAAgD,GAAhD,EAAqD,EAArD,CALJ;AAOA,QAAMG,eAAe,GAAGR,YAAY,CAACS,OAAb,CAAqB,CAArB,EAAwBP,IAAxB,CAA6BG,UAA7B,CAAwC,GAAxC,EAA6C,KAA7C,CAAxB;AAEAT,IAAAA,SAAS,CACNc,cADH,CACkB;AACdC,MAAAA,MAAM,EAAEH,eADM;AAEdI,MAAAA,KAAK,EAAEX,cAFO;AAGdY,MAAAA,IAAI,EAAE;AAHQ,KADlB,EAMGC,IANH,CAMQ,UAACC,IAAD,EAAU;AACdxB,MAAAA,OAAO,CAACC,GAAR,CAAY,kBAAZ,EAAgCuB,IAAhC,EADc,CAEd;;AACA,UAAIA,IAAI,CAACC,OAAL,CAAaC,MAAb,GAAsB,CAA1B,EAA6B;AAC3B3B,QAAAA,cAAc,CAACyB,IAAI,CAACC,OAAN,CAAd;AACD,OAFD,MAEO;AACLzB,QAAAA,OAAO,CAACC,GAAR,CAAY,SAAZ;AACD;AACF,KAdH;AAgBAI,IAAAA,SAAS,CAACsB,UAAV,CAAqB,OAArB,EAA8BJ,IAA9B,CAAmC,UAACC,IAAD,EAAU;AAC3CxB,MAAAA,OAAO,CAACC,GAAR,CAAY,qBAAZ,EAAmCuB,IAAnC;AACD,KAFD;AAGD,GA5CiD,CA8ClD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAEA,SAAO1B,WAAP;AACD;;GA9DuBF,c","sourcesContent":["import { useEffect, useState } from \"react\";\nimport { Discojs } from \"discojs\";\n\nexport default function useDiscogsData(spotifyData) {\n  const [discogsData, setDiscogsData] = useState(null);\n  console.log(\"discogs API key\", process.env.NEXT_PUBLIC_DISCOGS_KEY);\n\n  const dicogsApi = new Discojs({\n    userToken: process.env.NEXT_PUBLIC_DISCOGS_KEY,\n  });\n\n  useEffect(() => {\n    spotifyData && fetchDiscogsData(spotifyData, setDiscogsData);\n  }, [spotifyData]);\n\n  function fetchDiscogsData(spotifyData, setDiscogsData) {\n    const regex = /\\s*\\([^)]*\\)/g;\n    const currentTrack = spotifyData;\n\n    const cleanTrackName = currentTrack.name.includes(\"-\")\n      ? currentTrack.name\n          .replace(regex, \"\")\n          .replaceAll(\"&\", \"\")\n          .substring(0, currentTrack.name.indexOf(\"-\"))\n      : currentTrack.name.replace(regex, \"\").replaceAll(\"&\", \"\");\n\n    const cleanArtistName = currentTrack.artists[0].name.replaceAll(\"&\", \"and\");\n\n    dicogsApi\n      .searchDatabase({\n        artist: cleanArtistName,\n        track: cleanTrackName,\n        type: \"release\",\n      })\n      .then((data) => {\n        console.log(\"discogs api data\", data);\n        // checks if discogs search brings any result\n        if (data.results.length > 0) {\n          setDiscogsData(data.results);\n        } else {\n          console.log(\"no data\");\n        }\n      });\n\n    dicogsApi.getRelease(4387601).then((data) => {\n      console.log(\"discogs master data\", data);\n    });\n  }\n\n  // useEffect(() => {\n  //   if (discogsData) {\n  //     const releaseIds = discogsData.map((release) => release.id);\n  //     console.log(\"ids\", releaseIds);\n  //     const releasesDetails = releaseIds.map(function (id) {\n  //       dicogsApi.getRelease(id).then((data) => {\n  //         console.log(\"inside map\", data);\n  //         return data;\n  //       });\n  //     });\n  //     console.log(releasesDetails);\n  //   }\n  // }\n  //  , [discogsData]);\n\n  return discogsData;\n}\n"]},"metadata":{},"sourceType":"module"}