{"ast":null,"code":"import { useEffect, useState } from \"react\";\nimport Discojs from 'discojs';\nexport default function useDiscogsData(spotifyData) {\n  const {\n    0: discogsData,\n    1: setDiscogsData\n  } = useState(null);\n  console.log(\"discogs API key\", process.env.NEXT_PUBLIC_DISCOGS_KE);\n  useEffect(() => {\n    fetchDiscogsData(spotifyData, setDiscogsData);\n  }, [spotifyData]);\n\n  function fetchDiscogsData(spotifyData, setDiscogsData) {\n    const dicogsApi = new Discojs({\n      userToken: process.env.NEXT_PUBLIC_DISCOGS_KEY\n    });\n    const regex = /\\s*\\([^)]*\\)/g;\n    const currentTrack = spotifyData.name;\n    const cleanTrackName = currentTrack.name.includes(\"-\") ? currentTrack.name.replace(regex, \"\").replaceAll(\"&\", \"\").substring(0, currentTrack.name.indexOf(\"-\")) : currentTrack.name.replace(regex, \"\").replaceAll(\"&\", \"\");\n    const cleanArtistName = currentTrack.artists[0].name.replaceAll(\"&\", \"and\");\n    dicogsApi.searchDatabase({\n      // search uses only the first word of the artist name\n      // artist: spotifyTrackData.artists[0].name.replace(/ .*/, \"\"),\n      artist: cleanArtistName,\n      track: cleanTrackName,\n      type: \"release\"\n    }).then(data => {\n      console.log(\"discogs api data\", data); // checks if discogs search brings any result\n\n      if (data.results.length > 0) {\n        setDiscogsData(data.results);\n      } else {\n        console.log(\"no data\");\n      }\n    });\n  }\n\n  return discogsData;\n}","map":{"version":3,"sources":["/Users/jeremie/web/44_spotify-liner-notes2.0/pages/api/useDiscogsData.js"],"names":["useEffect","useState","Discojs","useDiscogsData","spotifyData","discogsData","setDiscogsData","console","log","process","env","NEXT_PUBLIC_DISCOGS_KE","fetchDiscogsData","dicogsApi","userToken","NEXT_PUBLIC_DISCOGS_KEY","regex","currentTrack","name","cleanTrackName","includes","replace","replaceAll","substring","indexOf","cleanArtistName","artists","searchDatabase","artist","track","type","then","data","results","length"],"mappings":"AAAA,SAASA,SAAT,EAAoBC,QAApB,QAAoC,OAApC;AACA,OAAOC,OAAP,MAAoB,SAApB;AAEA,eAAe,SAASC,cAAT,CAAwBC,WAAxB,EAAqC;AAClD,QAAM;AAAA,OAACC,WAAD;AAAA,OAAcC;AAAd,MAAgCL,QAAQ,CAAC,IAAD,CAA9C;AACAM,EAAAA,OAAO,CAACC,GAAR,CAAY,iBAAZ,EAA+BC,OAAO,CAACC,GAAR,CAAYC,sBAA3C;AAEAX,EAAAA,SAAS,CAAC,MAAM;AACZY,IAAAA,gBAAgB,CAACR,WAAD,EAAcE,cAAd,CAAhB;AACH,GAFQ,EAEN,CAACF,WAAD,CAFM,CAAT;;AAIA,WAASQ,gBAAT,CAA0BR,WAA1B,EAAuCE,cAAvC,EAAuD;AACnD,UAAMO,SAAS,GAAG,IAAIX,OAAJ,CAAY;AAC7BY,MAAAA,SAAS,EAAEL,OAAO,CAACC,GAAR,CAAYK;AADM,KAAZ,CAAlB;AAGA,UAAMC,KAAK,GAAG,eAAd;AACA,UAAMC,YAAY,GAAGb,WAAW,CAACc,IAAjC;AAEF,UAAMC,cAAc,GAAGF,YAAY,CAACC,IAAb,CAAkBE,QAAlB,CAA2B,GAA3B,IACrBH,YAAY,CAACC,IAAb,CACOG,OADP,CACeL,KADf,EACsB,EADtB,EAEOM,UAFP,CAEkB,GAFlB,EAEuB,EAFvB,EAGOC,SAHP,CAGiB,CAHjB,EAGoBN,YAAY,CAACC,IAAb,CAAkBM,OAAlB,CAA0B,GAA1B,CAHpB,CADqB,GAKrBP,YAAY,CAACC,IAAb,CACOG,OADP,CACeL,KADf,EACsB,EADtB,EAEOM,UAFP,CAEkB,GAFlB,EAEuB,EAFvB,CALF;AASF,UAAMG,eAAe,GAAGR,YAAY,CAACS,OAAb,CAAqB,CAArB,EAAwBR,IAAxB,CAA6BI,UAA7B,CAAwC,GAAxC,EAA6C,KAA7C,CAAxB;AAEAT,IAAAA,SAAS,CACNc,cADH,CACkB;AACd;AACA;AACAC,MAAAA,MAAM,EAAEH,eAHM;AAIdI,MAAAA,KAAK,EAAEV,cAJO;AAKdW,MAAAA,IAAI,EAAE;AALQ,KADlB,EAQGC,IARH,CAQSC,IAAD,IAAU;AACdzB,MAAAA,OAAO,CAACC,GAAR,CAAY,kBAAZ,EAAgCwB,IAAhC,EADc,CAEd;;AACA,UAAIA,IAAI,CAACC,OAAL,CAAaC,MAAb,GAAsB,CAA1B,EAA6B;AAC3B5B,QAAAA,cAAc,CAAC0B,IAAI,CAACC,OAAN,CAAd;AACD,OAFD,MAEO;AACL1B,QAAAA,OAAO,CAACC,GAAR,CAAY,SAAZ;AACD;AACF,KAhBH;AAiBG;;AAED,SAAOH,WAAP;AACH","sourcesContent":["import { useEffect, useState } from \"react\";\nimport Discojs from 'discojs';\n\nexport default function useDiscogsData(spotifyData) {\n  const [discogsData, setDiscogsData] = useState(null);\n  console.log(\"discogs API key\", process.env.NEXT_PUBLIC_DISCOGS_KE)\n\n  useEffect(() => {\n      fetchDiscogsData(spotifyData, setDiscogsData)\n  }, [spotifyData]);\n\n  function fetchDiscogsData(spotifyData, setDiscogsData) {\n      const dicogsApi = new Discojs({\n       userToken: process.env.NEXT_PUBLIC_DISCOGS_KEY,\n    });\n      const regex = /\\s*\\([^)]*\\)/g;\n      const currentTrack = spotifyData.name\n\n    const cleanTrackName = currentTrack.name.includes(\"-\") ?\n      currentTrack.name\n            .replace(regex, \"\")\n            .replaceAll(\"&\", \"\")\n            .substring(0, currentTrack.name.indexOf(\"-\")):\n      currentTrack.name\n            .replace(regex, \"\")\n            .replaceAll(\"&\", \"\")\n\n  const cleanArtistName = currentTrack.artists[0].name.replaceAll(\"&\", \"and\")\n\n  dicogsApi\n    .searchDatabase({\n      // search uses only the first word of the artist name\n      // artist: spotifyTrackData.artists[0].name.replace(/ .*/, \"\"),\n      artist: cleanArtistName,\n      track: cleanTrackName,\n      type: \"release\",\n    })\n    .then((data) => {\n      console.log(\"discogs api data\", data)\n      // checks if discogs search brings any result\n      if (data.results.length > 0) {\n        setDiscogsData(data.results)     \n      } else {\n        console.log(\"no data\")    \n      }\n    });\n    }\n\n    return discogsData\n}"]},"metadata":{},"sourceType":"module"}