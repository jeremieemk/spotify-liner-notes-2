import * as t from "io-ts";
declare enum DataQualityEnum {
    NEEDS_VOTE = "Needs Vote",
    NEEDS_MINOR_CHANGE = "Needs Minor Changes",
    CORRECT = "Correct"
}
declare enum CommunityStatusesEnum {
    ACCEPTED = "Accepted"
}
declare enum ReleaseConditionsEnum {
    MINT = "Mint (M)",
    NEAR_MINT = "Near Mint (NM or M-)",
    VERY_GOOD_PLUS = "Very Good Plus (VG+)",
    VERY_GOOD = "Very Good (VG)",
    GOOD_PLUS = "Good Plus (G+)",
    GOOD = "Good (G)",
    FAIR = "Fair (F)",
    POOR = "Poor (P)"
}
declare enum SleeveConditionsEnum {
    MINT = "Mint (M)",
    NEAR_MINT = "Near Mint (NM or M-)",
    VERY_GOOD_PLUS = "Very Good Plus (VG+)",
    VERY_GOOD = "Very Good (VG)",
    GOOD_PLUS = "Good Plus (G+)",
    GOOD = "Good (G)",
    FAIR = "Fair (F)",
    POOR = "Poor (P)",
    GENERIC = "Generic",
    NOT_GRADED = "Not Graded",
    NO_COVER = "No Cover"
}
declare enum CurrenciesEnum {
    USD = "USD",
    GBP = "GBP",
    EUR = "EUR",
    CAD = "CAD",
    AUD = "AUD",
    JPY = "JPY",
    CHF = "CHF",
    MXN = "MXN",
    BRL = "BRL",
    NZD = "NZD",
    SEK = "SEK",
    ZAR = "ZAR"
}
declare enum FolderIdsEnum {
    ALL = 0,
    UNCATEGORIZED = 1
}
declare enum InventoryStatusesEnum {
    ALL = "All",
    DELETED = "Deleted",
    DRAFT = "Draft",
    EXPIRED = "Expired",
    FOR_SALE = "For Sale",
    SOLD = "Sold",
    SUSPENDED = "Suspended",
    VIOLATION = "Violation"
}
declare enum InventorySortEnum {
    LISTED = "listed",
    PRICE = "price",
    ITEM = "item",
    ARTIST = "artist",
    LABEL = "label",
    CATNO = "catno",
    AUDIO = "audio",
    STATUS = "status",
    LOCATION = "location"
}
declare enum ListingStatusesEnum {
    FOR_SALE = "For Sale",
    DRAFT = "Draft"
}
declare enum EditOrderStatusesEnum {
    NEW_ORDER = "New Order",
    BUYER_CONTACTER = "Buyer Contacted",
    INVOICE_SENT = "Invoice Sent",
    PAYMENT_PENDING = "Payment Pending",
    PAYMENT_RECEIVED = "Payment Received",
    SHIPPED = "Shipped",
    REFUND_SENT = "Refund Sent",
    CANCELLED_NON_PAYING_BUYER = "Cancelled (Non-Paying Buyer)",
    CANCELLED_ITEM_UNAVAILABLE = "Cancelled (Item Unavailable)",
    CANCELLED_PER_BUYER_REQUEST = "Cancelled (Per Buyer's Request)"
}
declare enum OrderStatusesEnum {
    ALL = "All",
    NEW_ORDER = "New Order",
    BUYER_CONTACTED = "Buyer Contacted",
    INVOICE_SENT = "Invoice Sent",
    PAYMENT_PENDING = "Payment Pending",
    PAYMENT_RECEIVED = "Payment Received",
    SHIPPED = "Shipped",
    MERGED = "Merged",
    ORDER_CHANGED = "Order Changed",
    REFUND_SENT = "Refund Sent",
    CANCELLED = "Cancelled",
    CANCELLED_NON_PAYING_BUYER = "Cancelled (Non-Paying Buyer)",
    CANCELLED_ITEM_UNAVAILABLE = "Cancelled (Item Unavailable)",
    CANCELLED_PER_BUYER_REQUEST = "Cancelled (Per Buyer's Request)",
    CANCELLED_REFUND_RECEIVED = "Cancelled (Refund Received)"
}
declare enum OrderSortEnum {
    ID = "id",
    BUYER = "buyer",
    CREATED = "created",
    STATUS = "status",
    LAST_ACTIVITY = "last_activity"
}
declare enum OrderMessageTypesEnum {
    STATUS = "status",
    MESSAGE = "message",
    SHIPPING = "shipping",
    REFUND_SENT = "refund_sent",
    REFUND_RECEIVED = "refund_received"
}
declare enum ReleaseSortEnum {
    YEAR = "year",
    TITLE = "title",
    FORMAT = "format"
}
declare enum SearchTypeEnum {
    RELEASE = "release",
    MASTER = "master",
    ARTIST = "artist",
    LABEL = "label"
}
declare enum UserSortEnum {
    LABEL = "label",
    ARTIST = "artist",
    TITLE = "title",
    CATNO = "catno",
    FORMAT = "format",
    RATING = "rating",
    YEAR = "year",
    ADDED = "added"
}
interface Pagination {
    /** Page to display, default to 1. */
    page?: number;
    /** Number of items per page, default to 50. */
    perPage?: number;
}
declare enum SortOrdersEnum {
    ASC = "asc",
    DESC = "desc"
}
interface SortOptions<T> {
    by?: T;
    order?: SortOrdersEnum;
}
type EmptyResponse = {};
/**
 * @internal
 */
declare const OrdersResponseIO: t.TypeC<{
    pagination: t.TypeC<{
        items: t.RefinementC<t.NumberC>;
        page: t.RefinementC<t.NumberC>;
        pages: t.RefinementC<t.NumberC>;
        per_page: t.RefinementC<t.NumberC>;
        urls: t.PartialC<{
            first: t.UnionC<[
                t.StringC,
                t.UndefinedC
            ]>;
            prev: t.UnionC<[
                t.StringC,
                t.UndefinedC
            ]>;
            next: t.UnionC<[
                t.StringC,
                t.UndefinedC
            ]>;
            last: t.UnionC<[
                t.StringC,
                t.UndefinedC
            ]>;
        }>;
    }>;
    orders: t.ArrayC<t.IntersectionC<[
        t.TypeC<{
            resource_url: t.StringC;
        }>,
        t.TypeC<{
            id: t.StringC;
            status: t.Type<EditOrderStatusesEnum, string, unknown>;
            next_status: t.ArrayC<t.Type<EditOrderStatusesEnum, string, unknown>>;
            items: t.ArrayC<t.TypeC<{
                id: t.RefinementC<t.NumberC>;
                release: t.TypeC<{
                    id: t.RefinementC<t.NumberC>;
                    description: t.StringC;
                }>;
                price: t.PartialC<{
                    value: t.NumberC;
                    currency: t.Type<CurrenciesEnum, string, unknown>;
                }>;
                media_condition: t.Type<ReleaseConditionsEnum, string, unknown>;
                sleeve_condition: t.Type<SleeveConditionsEnum, string, unknown>;
            }>>;
            shipping: t.IntersectionC<[
                t.PartialC<{
                    value: t.NumberC;
                    currency: t.Type<CurrenciesEnum, string, unknown>;
                }>,
                t.TypeC<{
                    method: t.StringC;
                }>
            ]>;
            shipping_address: t.StringC;
            additional_instructions: t.StringC;
            fee: t.PartialC<{
                value: t.NumberC;
                currency: t.Type<CurrenciesEnum, string, unknown>;
            }>;
            total: t.PartialC<{
                value: t.NumberC;
                currency: t.Type<CurrenciesEnum, string, unknown>;
            }>;
            seller: t.IntersectionC<[
                t.TypeC<{
                    resource_url: t.StringC;
                }>,
                t.TypeC<{
                    id: t.RefinementC<t.NumberC>;
                    username: t.StringC;
                }>
            ]>;
            buyer: t.IntersectionC<[
                t.TypeC<{
                    resource_url: t.StringC;
                }>,
                t.TypeC<{
                    id: t.RefinementC<t.NumberC>;
                    username: t.StringC;
                }>
            ]>;
            archived: t.BooleanC;
            created: t.StringC;
            last_activity: t.StringC;
            messages_url: t.StringC;
            uri: t.StringC;
        }>
    ]>>;
}>;
interface OrdersResponse extends t.TypeOf<typeof OrdersResponseIO> {
}
type UserTokenAuth = {
    /** User token. */
    userToken: string;
};
type ConsumerKeyAuth = {
    /** Consumer key. */
    consumerKey: string;
    /** Consumer secret. */
    consumerSecret: string;
    /** OAuth token. */
    oAuthToken: string;
    /** OAuth token secret. */
    oAuthTokenSecret: string;
};
// @TODO: Make a better limiter (one limit, no interval, should use headers from Discogs).
type LimiterOptions = {
    /** Number of requests per interval for unauthenticated requests. Defaults to 25. */
    requestLimit?: number;
    /** Number of requests per interval for authenticated requests. Defaults to 60. */
    requestLimitAuth?: number;
    /** Interval to use to throttle requests. Defaults to 60 seconds. */
    requestLimitInterval?: number;
};
/**
 * Available output formats.
 *
 * @todo Edit types depending on chosen output format.
 */
declare enum OutputFormatsEnum {
    DISCOGS = "discogs"
}
interface DiscojsOptions extends Partial<UserTokenAuth>, Partial<ConsumerKeyAuth>, LimiterOptions {
    /**
     * User-agent to be used in requests.
     *
     * @default Discojs/{packageVersion}
     */
    userAgent?: string;
    /**
     * Output format.
     *
     * @default discogs
     */
    outputFormat?: OutputFormatsEnum;
    fetchOptions?: RequestInit;
}
type SearchOptions = {
    query?: string;
    type?: SearchTypeEnum;
    title?: string;
    releaseTitle?: string;
    credit?: string;
    artist?: string;
    anv?: string;
    label?: string;
    genre?: string;
    style?: string;
    country?: string;
    year?: string | number;
    format?: string;
    catno?: string;
    barcode?: string;
    track?: string;
    submitter?: string;
    contributor?: string;
};
type ProfileOptions = {
    username?: string;
    name?: string;
    homePage?: string;
    location?: string;
    profile?: string;
    currAbbr?: CurrenciesEnum;
};
type ListingOptions = {
    releaseId: number;
    condition: ReleaseConditionsEnum;
    sleeveCondition?: SleeveConditionsEnum;
    price: number;
    comments?: string;
    allowOffers?: boolean;
    status: ListingStatusesEnum;
    externalId?: string;
    location?: string;
    weight?: "auto" | number;
    formatQuantity?: "auto" | number;
};
type RatingValues = 0 | 1 | 2 | 3 | 4 | 5;
/**
 * Discojs.
 */
declare class Discojs {
    userAgent: string;
    outputFormat: OutputFormatsEnum;
    private limiter;
    private fetchHeaders;
    private setAuthorizationHeader?;
    private fetchOptions;
    constructor(options?: DiscojsOptions);
    /**
     * Return currencies supported by Discogs.
     *
     * @category Helpers
     *
     * @static
     */
    static getSupportedCurrencies(): CurrenciesEnum[];
    /**
     * Return release conditions supported by Discogs.
     *
     * @category Helpers
     *
     * @static
     */
    static getReleaseConditions(): ReleaseConditionsEnum[];
    /**
     * Return slevve conditions supported by Discogs.
     *
     * @category Helpers
     *
     * @static
     */
    static getSleeveConditions(): SleeveConditionsEnum[];
    /**
     * Private method used within other methods.
     *
     * @private
     * @internal
     */
    private fetch;
    /**
     * Retrieve basic information about the authenticated user.
     *
     * @remarks
     * You can use this resource to find out who you’re authenticated as, and it also doubles as a good sanity check to ensure that you’re using OAuth correctly.
     *
     * @category User Identity
     *
     * @link https://www.discogs.com/developers#page:user-identity,header:user-identity-identity
     */
    getIdentity(): Promise<{
        resource_url: string;
    } & {
        id: number;
        username: string;
        consumer_name: string;
    }>;
    /**
     * Retrieve authenticated user's username.
     *
     * @remarks
     * Used internally within methods that use `username` as a param.
     *
     * @category User Identity
     *
     * @private
     */
    private getUsername;
    /**
     * Retrieve user's profile by username.
     *
     * @remarks
     * If authenticated as the requested user, the `email` key will be visible, and the `num_list count` will include the user’s private lists.
     * If authenticated as the requested user or the user’s collection/wantlist is public, the `num_collection` / `num_wantlist` keys will be visible.
     *
     * @category User Profile
     *
     * @link https://www.discogs.com/developers#page:user-identity,header:user-identity-profile
     */
    getProfileForUser(username: string): Promise<{
        resource_url: string;
    } & {
        email?: string | undefined;
        num_collection?: number | undefined;
        num_wantlist?: number | undefined;
    } & {
        id: number;
        username: string;
        name: string;
        profile: string;
        home_page: string;
        location: string;
        registered: string;
        rank: number;
        uri: string;
        collection_fields_url: string;
        collection_folders_url: string;
        inventory_url: string;
        wantlist_url: string;
        rating_avg: number;
        releases_contributed: number;
        releases_rated: number;
        num_for_sale: number;
        num_lists: number;
        num_pending: number;
        buyer_rating: number;
        buyer_rating_stars: number;
        buyer_num_ratings: number;
        seller_rating: number;
        seller_rating_stars: number;
        seller_num_ratings: number;
        curr_abbr: CurrenciesEnum;
    }>;
    /**
     * Retrieve authenticated user's profile.
     *
     * @category User Profile
     *
     * @link https://www.discogs.com/developers#page:user-identity,header:user-identity-profile
     */
    getProfile(): Promise<{
        resource_url: string;
    } & {
        email?: string | undefined;
        num_collection?: number | undefined;
        num_wantlist?: number | undefined;
    } & {
        id: number;
        username: string;
        name: string;
        profile: string;
        home_page: string;
        location: string;
        registered: string;
        rank: number;
        uri: string;
        collection_fields_url: string;
        collection_folders_url: string;
        inventory_url: string;
        wantlist_url: string;
        rating_avg: number;
        releases_contributed: number;
        releases_rated: number;
        num_for_sale: number;
        num_lists: number;
        num_pending: number;
        buyer_rating: number;
        buyer_rating_stars: number;
        buyer_num_ratings: number;
        seller_rating: number;
        seller_rating_stars: number;
        seller_num_ratings: number;
        curr_abbr: CurrenciesEnum;
    }>;
    /**
     * Edit a user’s profile data.
     *
     * @category User Profile
     *
     * @link https://www.discogs.com/developers#page:user-identity,header:user-identity-profile
     */
    editProfile(options: ProfileOptions): Promise<{
        resource_url: string;
    } & {
        email?: string | undefined;
        num_collection?: number | undefined;
        num_wantlist?: number | undefined;
    } & {
        id: number;
        username: string;
        name: string;
        profile: string;
        home_page: string;
        location: string;
        registered: string;
        rank: number;
        uri: string;
        collection_fields_url: string;
        collection_folders_url: string;
        inventory_url: string;
        wantlist_url: string;
        rating_avg: number;
        releases_contributed: number;
        releases_rated: number;
        num_for_sale: number;
        num_lists: number;
        num_pending: number;
        buyer_rating: number;
        buyer_rating_stars: number;
        buyer_num_ratings: number;
        seller_rating: number;
        seller_rating_stars: number;
        seller_num_ratings: number;
        curr_abbr: CurrenciesEnum;
    }>;
    /**
     * Retrieve a user’s submissions by username.
     *
     * @category User Submissions
     *
     * @link https://www.discogs.com/developers#page:user-identity,header:user-identity-user-submissions
     */
    getSubmissionsForUser(username: string, pagination?: Pagination): Promise<{
        pagination: {
            items: number;
            page: number;
            pages: number;
            per_page: number;
            urls: {
                first?: string | undefined;
                prev?: string | undefined;
                next?: string | undefined;
                last?: string | undefined;
            };
        };
        submissions: {
            artists?: ({
                resource_url: string;
            } & {
                id: number;
                profile: string;
                data_quality: DataQualityEnum;
                namevariations: string[];
                releases_url: string;
                images: ({
                    resource_url: string;
                } & {
                    type: "primary" | "secondary";
                    width: number;
                    height: number;
                    uri: string;
                    uri150: string;
                })[];
                uri: string;
            } & {
                urls?: string[] | undefined;
            } & {
                members?: string | readonly string[] | undefined;
            })[] | undefined;
            labels?: ({
                resource_url: string;
            } & {
                id: number;
                name: string;
                profile: string;
                contact_info: string;
                data_quality: DataQualityEnum;
                sublabels: ({
                    resource_url: string;
                } & {
                    id: number;
                    name: string;
                })[];
                urls: string[];
                releases_url: string;
                images: ({
                    resource_url: string;
                } & {
                    type: "primary" | "secondary";
                    width: number;
                    height: number;
                    uri: string;
                    uri150: string;
                })[];
                uri: string;
            })[] | undefined;
            releases?: ({
                resource_url: string;
            } & {
                extraartists?: ({
                    resource_url: string;
                } & {
                    id: number;
                    name: string;
                    anv: string;
                    join: string;
                    role: string;
                    tracks: string;
                })[] | undefined;
                genres?: string[] | undefined;
                styles?: string[] | undefined;
                country?: string | undefined;
                notes?: string | undefined;
                released?: string | undefined;
                released_formatted?: string | undefined;
                tracklist?: {
                    type_: string;
                    title: string;
                    position: string;
                    duration: string;
                }[] | undefined;
                master_id?: number | undefined;
                master_url?: string | undefined;
                estimated_weight?: number | undefined;
                images?: ({
                    resource_url: string;
                } & {
                    type: "primary" | "secondary";
                    width: number;
                    height: number;
                    uri: string;
                    uri150: string;
                })[] | undefined;
                videos?: {
                    title: string;
                    description: string;
                    duration: number;
                    embed: boolean;
                    uri: string;
                }[] | undefined;
            } & {
                id: number;
                title: string;
                artists: ({
                    resource_url: string;
                } & {
                    id: number;
                    name: string;
                    anv: string;
                    join: string;
                    role: string;
                    tracks: string;
                })[];
                formats: {
                    name: string;
                    qty: string;
                }[];
                year: number;
                format_quantity: number;
                identifiers: {
                    type: string;
                    value: string;
                }[];
                labels: ({
                    resource_url: string;
                } & {
                    id: number;
                    name: string;
                    entity_type: string;
                    entity_type_name: string;
                    catno: string;
                })[];
                companies: ({
                    resource_url: string;
                } & {
                    id: number;
                    name: string;
                    entity_type: string;
                    entity_type_name: string;
                    catno: string;
                })[];
                series: ({
                    resource_url: string;
                } & {
                    id: number;
                    name: string;
                    entity_type: string;
                    entity_type_name: string;
                    catno: string;
                })[];
                thumb: string;
                lowest_price: number | null;
                num_for_sale: number;
                date_added: string;
                date_changed: string;
                data_quality: DataQualityEnum;
                status: CommunityStatusesEnum.ACCEPTED;
                community: {
                    have: number;
                    want: number;
                    rating: {
                        count: number;
                        average: number;
                    };
                    submitter: {
                        resource_url: string;
                    } & {
                        username: string;
                    };
                    contributors: ({
                        resource_url: string;
                    } & {
                        username: string;
                    })[];
                    data_quality: DataQualityEnum;
                    status: CommunityStatusesEnum.ACCEPTED;
                };
                uri: string;
            })[] | undefined;
        };
    }>;
    /**
     * Retrieve authenticated user’s submissions.
     *
     * @category User Submissions
     *
     * @link https://www.discogs.com/developers#page:user-identity,header:user-identity-user-submissions
     */
    getSubmissions(pagination?: Pagination): Promise<{
        pagination: {
            items: number;
            page: number;
            pages: number;
            per_page: number;
            urls: {
                first?: string | undefined;
                prev?: string | undefined;
                next?: string | undefined;
                last?: string | undefined;
            };
        };
        submissions: {
            artists?: ({
                resource_url: string;
            } & {
                id: number;
                profile: string;
                data_quality: DataQualityEnum;
                namevariations: string[];
                releases_url: string;
                images: ({
                    resource_url: string;
                } & {
                    type: "primary" | "secondary";
                    width: number;
                    height: number;
                    uri: string;
                    uri150: string;
                })[];
                uri: string;
            } & {
                urls?: string[] | undefined;
            } & {
                members?: string | readonly string[] | undefined;
            })[] | undefined;
            labels?: ({
                resource_url: string;
            } & {
                id: number;
                name: string;
                profile: string;
                contact_info: string;
                data_quality: DataQualityEnum;
                sublabels: ({
                    resource_url: string;
                } & {
                    id: number;
                    name: string;
                })[];
                urls: string[];
                releases_url: string;
                images: ({
                    resource_url: string;
                } & {
                    type: "primary" | "secondary";
                    width: number;
                    height: number;
                    uri: string;
                    uri150: string;
                })[];
                uri: string;
            })[] | undefined;
            releases?: ({
                resource_url: string;
            } & {
                extraartists?: ({
                    resource_url: string;
                } & {
                    id: number;
                    name: string;
                    anv: string;
                    join: string;
                    role: string;
                    tracks: string;
                })[] | undefined;
                genres?: string[] | undefined;
                styles?: string[] | undefined;
                country?: string | undefined;
                notes?: string | undefined;
                released?: string | undefined;
                released_formatted?: string | undefined;
                tracklist?: {
                    type_: string;
                    title: string;
                    position: string;
                    duration: string;
                }[] | undefined;
                master_id?: number | undefined;
                master_url?: string | undefined;
                estimated_weight?: number | undefined;
                images?: ({
                    resource_url: string;
                } & {
                    type: "primary" | "secondary";
                    width: number;
                    height: number;
                    uri: string;
                    uri150: string;
                })[] | undefined;
                videos?: {
                    title: string;
                    description: string;
                    duration: number;
                    embed: boolean;
                    uri: string;
                }[] | undefined;
            } & {
                id: number;
                title: string;
                artists: ({
                    resource_url: string;
                } & {
                    id: number;
                    name: string;
                    anv: string;
                    join: string;
                    role: string;
                    tracks: string;
                })[];
                formats: {
                    name: string;
                    qty: string;
                }[];
                year: number;
                format_quantity: number;
                identifiers: {
                    type: string;
                    value: string;
                }[];
                labels: ({
                    resource_url: string;
                } & {
                    id: number;
                    name: string;
                    entity_type: string;
                    entity_type_name: string;
                    catno: string;
                })[];
                companies: ({
                    resource_url: string;
                } & {
                    id: number;
                    name: string;
                    entity_type: string;
                    entity_type_name: string;
                    catno: string;
                })[];
                series: ({
                    resource_url: string;
                } & {
                    id: number;
                    name: string;
                    entity_type: string;
                    entity_type_name: string;
                    catno: string;
                })[];
                thumb: string;
                lowest_price: number | null;
                num_for_sale: number;
                date_added: string;
                date_changed: string;
                data_quality: DataQualityEnum;
                status: CommunityStatusesEnum.ACCEPTED;
                community: {
                    have: number;
                    want: number;
                    rating: {
                        count: number;
                        average: number;
                    };
                    submitter: {
                        resource_url: string;
                    } & {
                        username: string;
                    };
                    contributors: ({
                        resource_url: string;
                    } & {
                        username: string;
                    })[];
                    data_quality: DataQualityEnum;
                    status: CommunityStatusesEnum.ACCEPTED;
                };
                uri: string;
            })[] | undefined;
        };
    }>;
    /**
     * Retrieve a user’s contributions by username.
     *
     * @category User Contributions
     *
     * @link https://www.discogs.com/developers#page:user-identity,header:user-identity-user-contributions
     */
    getContributionsForUser(username: string, sort?: SortOptions<UserSortEnum>, pagination?: Pagination): Promise<{
        pagination: {
            items: number;
            page: number;
            pages: number;
            per_page: number;
            urls: {
                first?: string | undefined;
                prev?: string | undefined;
                next?: string | undefined;
                last?: string | undefined;
            };
        };
        contributions: ({
            resource_url: string;
        } & {
            extraartists?: ({
                resource_url: string;
            } & {
                id: number;
                name: string;
                anv: string;
                join: string;
                role: string;
                tracks: string;
            })[] | undefined;
            genres?: string[] | undefined;
            styles?: string[] | undefined;
            country?: string | undefined;
            notes?: string | undefined;
            released?: string | undefined;
            released_formatted?: string | undefined;
            tracklist?: {
                type_: string;
                title: string;
                position: string;
                duration: string;
            }[] | undefined;
            master_id?: number | undefined;
            master_url?: string | undefined;
            estimated_weight?: number | undefined;
            images?: ({
                resource_url: string;
            } & {
                type: "primary" | "secondary";
                width: number;
                height: number;
                uri: string;
                uri150: string;
            })[] | undefined;
            videos?: {
                title: string;
                description: string;
                duration: number;
                embed: boolean;
                uri: string;
            }[] | undefined;
        } & {
            id: number;
            title: string;
            artists: ({
                resource_url: string;
            } & {
                id: number;
                name: string;
                anv: string;
                join: string;
                role: string;
                tracks: string;
            })[];
            formats: {
                name: string;
                qty: string;
            }[];
            year: number;
            format_quantity: number;
            identifiers: {
                type: string;
                value: string;
            }[];
            labels: ({
                resource_url: string;
            } & {
                id: number;
                name: string;
                entity_type: string;
                entity_type_name: string;
                catno: string;
            })[];
            companies: ({
                resource_url: string;
            } & {
                id: number;
                name: string;
                entity_type: string;
                entity_type_name: string;
                catno: string;
            })[];
            series: ({
                resource_url: string;
            } & {
                id: number;
                name: string;
                entity_type: string;
                entity_type_name: string;
                catno: string;
            })[];
            thumb: string;
            lowest_price: number | null;
            num_for_sale: number;
            date_added: string;
            date_changed: string;
            data_quality: DataQualityEnum;
            status: CommunityStatusesEnum.ACCEPTED;
            community: {
                have: number;
                want: number;
                rating: {
                    count: number;
                    average: number;
                };
                submitter: {
                    resource_url: string;
                } & {
                    username: string;
                };
                contributors: ({
                    resource_url: string;
                } & {
                    username: string;
                })[];
                data_quality: DataQualityEnum;
                status: CommunityStatusesEnum.ACCEPTED;
            };
            uri: string;
        })[];
    }>;
    /**
     * Retrieve authenticated user’s contributions.
     *
     * @category User Contributions
     *
     * @link https://www.discogs.com/developers#page:user-identity,header:user-identity-user-contributions
     */
    getContributions(sort?: SortOptions<UserSortEnum>, pagination?: Pagination): Promise<{
        pagination: {
            items: number;
            page: number;
            pages: number;
            per_page: number;
            urls: {
                first?: string | undefined;
                prev?: string | undefined;
                next?: string | undefined;
                last?: string | undefined;
            };
        };
        contributions: ({
            resource_url: string;
        } & {
            extraartists?: ({
                resource_url: string;
            } & {
                id: number;
                name: string;
                anv: string;
                join: string;
                role: string;
                tracks: string;
            })[] | undefined;
            genres?: string[] | undefined;
            styles?: string[] | undefined;
            country?: string | undefined;
            notes?: string | undefined;
            released?: string | undefined;
            released_formatted?: string | undefined;
            tracklist?: {
                type_: string;
                title: string;
                position: string;
                duration: string;
            }[] | undefined;
            master_id?: number | undefined;
            master_url?: string | undefined;
            estimated_weight?: number | undefined;
            images?: ({
                resource_url: string;
            } & {
                type: "primary" | "secondary";
                width: number;
                height: number;
                uri: string;
                uri150: string;
            })[] | undefined;
            videos?: {
                title: string;
                description: string;
                duration: number;
                embed: boolean;
                uri: string;
            }[] | undefined;
        } & {
            id: number;
            title: string;
            artists: ({
                resource_url: string;
            } & {
                id: number;
                name: string;
                anv: string;
                join: string;
                role: string;
                tracks: string;
            })[];
            formats: {
                name: string;
                qty: string;
            }[];
            year: number;
            format_quantity: number;
            identifiers: {
                type: string;
                value: string;
            }[];
            labels: ({
                resource_url: string;
            } & {
                id: number;
                name: string;
                entity_type: string;
                entity_type_name: string;
                catno: string;
            })[];
            companies: ({
                resource_url: string;
            } & {
                id: number;
                name: string;
                entity_type: string;
                entity_type_name: string;
                catno: string;
            })[];
            series: ({
                resource_url: string;
            } & {
                id: number;
                name: string;
                entity_type: string;
                entity_type_name: string;
                catno: string;
            })[];
            thumb: string;
            lowest_price: number | null;
            num_for_sale: number;
            date_added: string;
            date_changed: string;
            data_quality: DataQualityEnum;
            status: CommunityStatusesEnum.ACCEPTED;
            community: {
                have: number;
                want: number;
                rating: {
                    count: number;
                    average: number;
                };
                submitter: {
                    resource_url: string;
                } & {
                    username: string;
                };
                contributors: ({
                    resource_url: string;
                } & {
                    username: string;
                })[];
                data_quality: DataQualityEnum;
                status: CommunityStatusesEnum.ACCEPTED;
            };
            uri: string;
        })[];
    }>;
    /**
     * Retrieve a list of folders in a user’s collection.
     *
     * @remarks
     * If the collection has been made private by its owner, authentication as the collection owner is required.
     * If you are not authenticated as the collection owner, only folder ID 0 (the “All” folder) will be visible (if the requested user’s collection is public).
     *
     * @category User Collection
     *
     * @link https://www.discogs.com/developers#page:user-collection,header:user-collection-collection
     */
    listFoldersForUser(username: string): Promise<{
        folders: ({
            resource_url: string;
        } & {
            id: number;
            count: number;
            name: string;
        })[];
    }>;
    /**
     * Retrieve a list of folders in authenticated user’s collection.
     *
     * @category User Collection
     *
     * @link https://www.discogs.com/developers#page:user-collection,header:user-collection-collection
     */
    listFolders(): Promise<{
        folders: ({
            resource_url: string;
        } & {
            id: number;
            count: number;
            name: string;
        })[];
    }>;
    /**
     * Create a new folder in authenticated user’s collection.
     *
     * @category User Collection
     *
     * @link https://www.discogs.com/developers#page:user-collection,header:user-collection-collection
     */
    createFolder(name: string): Promise<{
        resource_url: string;
    } & {
        id: number;
        count: number;
        name: string;
    }>;
    /**
     * Retrieve metadata about a folder in a user’s collection.
     *
     * @remarks
     * If folder_id is not 0, authentication as the collection owner is required.
     *
     * @category User Folder
     *
     * @link https://www.discogs.com/developers#page:user-collection,header:user-collection-collection-folder
     */
    getFolderForUser(username: string, folderId: FolderIdsEnum | number): Promise<{
        resource_url: string;
    } & {
        id: number;
        count: number;
        name: string;
    }>;
    /**
     * Retrieve metadata about a folder in authenticated user’s collection.
     *
     * @category User Folder
     *
     * @link https://www.discogs.com/developers#page:user-collection,header:user-collection-collection-folder
     */
    getFolder(folderId: FolderIdsEnum | number): Promise<{
        resource_url: string;
    } & {
        id: number;
        count: number;
        name: string;
    }>;
    /**
     * Edit a folder’s metadata.
     *
     * @remarks
     * Folders 0 and 1 cannot be renamed.
     *
     * @category User Folder
     *
     * @link https://www.discogs.com/developers#page:user-collection,header:user-collection-collection-folder
     */
    editFolder(folderId: FolderIdsEnum | number, name: string): Promise<{
        resource_url: string;
    } & {
        id: number;
        count: number;
        name: string;
    }>;
    /**
     * Delete a folder from a user’s collection.
     *
     * @remarks
     * A folder must be empty before it can be deleted.
     *
     * @category User Folder
     *
     * @link https://www.discogs.com/developers#page:user-collection,header:user-collection-collection-folder
     */
    deleteFolder(folderId: FolderIdsEnum | number): Promise<EmptyResponse>;
    /**
     * View the user’s collection folders which contain a specified release. This will also show information about each release instance.
     *
     * @remarks
     * Authentication as the collection owner is required if the owner’s collection is private.
     *
     * @category User
     * @label Items By Release
     *
     * @link https://www.discogs.com/developers#page:user-collection,header:user-collection-collection-items-by-release
     */
    listItemsByReleaseForUser(username: string, release_id: number, pagination?: Pagination): Promise<{
        pagination: {
            items: number;
            page: number;
            pages: number;
            per_page: number;
            urls: {
                first?: string | undefined;
                prev?: string | undefined;
                next?: string | undefined;
                last?: string | undefined;
            };
        };
        releases: {
            id: number;
            instance_id: number;
            rating: number;
            date_added: string;
            basic_information: {
                resource_url: string;
            } & {
                id: number;
                title: string;
                artists: ({
                    resource_url: string;
                } & {
                    id: number;
                    name: string;
                    anv: string;
                    join: string;
                    role: string;
                    tracks: string;
                })[];
                formats: {
                    name: string;
                    qty: string;
                }[];
                labels: ({
                    resource_url: string;
                } & {
                    id: number;
                    name: string;
                    entity_type: string;
                    entity_type_name: string;
                    catno: string;
                })[];
                year: number;
                cover_image: string;
                thumb: string;
            } & {
                genres: string[];
                styles: string[];
                master_id: number;
                master_url: string;
            };
        }[];
    }>;
    /**
     * View authenticated user’s collection folders which contain a specified release. This will also show information about each release instance.
     *
     * @category User
     * @label Items By Release
     *
     * @link https://www.discogs.com/developers#page:user-collection,header:user-collection-collection-items-by-release
     */
    listItemsByRelease(release_id: number, pagination?: Pagination): Promise<{
        pagination: {
            items: number;
            page: number;
            pages: number;
            per_page: number;
            urls: {
                first?: string | undefined;
                prev?: string | undefined;
                next?: string | undefined;
                last?: string | undefined;
            };
        };
        releases: {
            id: number;
            instance_id: number;
            rating: number;
            date_added: string;
            basic_information: {
                resource_url: string;
            } & {
                id: number;
                title: string;
                artists: ({
                    resource_url: string;
                } & {
                    id: number;
                    name: string;
                    anv: string;
                    join: string;
                    role: string;
                    tracks: string;
                })[];
                formats: {
                    name: string;
                    qty: string;
                }[];
                labels: ({
                    resource_url: string;
                } & {
                    id: number;
                    name: string;
                    entity_type: string;
                    entity_type_name: string;
                    catno: string;
                })[];
                year: number;
                cover_image: string;
                thumb: string;
            } & {
                genres: string[];
                styles: string[];
                master_id: number;
                master_url: string;
            };
        }[];
    }>;
    /**
     * Returns the list of item in a folder in a user’s collection.
     *
     * @remarks
     * Basic information about each release is provided, suitable for display in a list. For detailed information, make another API call to fetch the corresponding release.
     * If folder_id is not 0, or the collection has been made private by its owner, authentication as the collection owner is required.
     * If you are not authenticated as the collection owner, only public notes fields will be visible.
     *
     * @category User
     * @label Collection Items By Folder
     *
     * @link https://www.discogs.com/developers#page:user-collection,header:user-collection-collection-items-by-folder
     */
    listItemsInFolderForUser(username: string, folderId: FolderIdsEnum | number, sort?: SortOptions<UserSortEnum>, pagination?: Pagination): Promise<{
        pagination: {
            items: number;
            page: number;
            pages: number;
            per_page: number;
            urls: {
                first?: string | undefined;
                prev?: string | undefined;
                next?: string | undefined;
                last?: string | undefined;
            };
        };
        releases: {
            id: number;
            instance_id: number;
            rating: number;
            date_added: string;
            basic_information: {
                resource_url: string;
            } & {
                id: number;
                title: string;
                artists: ({
                    resource_url: string;
                } & {
                    id: number;
                    name: string;
                    anv: string;
                    join: string;
                    role: string;
                    tracks: string;
                })[];
                formats: {
                    name: string;
                    qty: string;
                }[];
                labels: ({
                    resource_url: string;
                } & {
                    id: number;
                    name: string;
                    entity_type: string;
                    entity_type_name: string;
                    catno: string;
                })[];
                year: number;
                cover_image: string;
                thumb: string;
            } & {
                genres: string[];
                styles: string[];
                master_id: number;
                master_url: string;
            };
        }[];
    }>;
    /**
     * Returns the list of item in a folder in authenticated user’s collection.
     *
     * @remarks
     * Basic information about each release is provided, suitable for display in a list. For detailed information, make another API call to fetch the corresponding release.
     *
     * @category User
     * @label Collection Items By Folder
     *
     * @link https://www.discogs.com/developers#page:user-collection,header:user-collection-collection-items-by-folder
     */
    listItemsInFolder(folderId: FolderIdsEnum | number, sort?: SortOptions<UserSortEnum>, pagination?: Pagination): Promise<{
        pagination: {
            items: number;
            page: number;
            pages: number;
            per_page: number;
            urls: {
                first?: string | undefined;
                prev?: string | undefined;
                next?: string | undefined;
                last?: string | undefined;
            };
        };
        releases: {
            id: number;
            instance_id: number;
            rating: number;
            date_added: string;
            basic_information: {
                resource_url: string;
            } & {
                id: number;
                title: string;
                artists: ({
                    resource_url: string;
                } & {
                    id: number;
                    name: string;
                    anv: string;
                    join: string;
                    role: string;
                    tracks: string;
                })[];
                formats: {
                    name: string;
                    qty: string;
                }[];
                labels: ({
                    resource_url: string;
                } & {
                    id: number;
                    name: string;
                    entity_type: string;
                    entity_type_name: string;
                    catno: string;
                })[];
                year: number;
                cover_image: string;
                thumb: string;
            } & {
                genres: string[];
                styles: string[];
                master_id: number;
                master_url: string;
            };
        }[];
    }>;
    /**
     * Add a release to a folder in authenticated user’s collection.
     *
     * @category User
     * @label Add To Collection Folder
     *
     * @link https://www.discogs.com/developers#page:user-collection,header:user-collection-add-to-collection-folder
     */
    addReleaseToFolder(releaseId: number, folderId?: FolderIdsEnum | number): Promise<{
        resource_url: string;
    } & {
        instance_id: number;
    }>;
    /**
     * Change the rating on a release.
     *
     * @category User
     * @label Change Rating Of Release
     *
     * @link https://www.discogs.com/developers#page:user-collection,header:user-collection-change-rating-of-release
     */
    editReleaseInstanceRating(folderId: FolderIdsEnum | number, releaseId: number, instanceId: number, rating: RatingValues): Promise<EmptyResponse>;
    /**
     * Move the instance of a release to another folder.
     *
     * @category User
     * @label Change Rating Of Release
     *
     * @link https://www.discogs.com/developers#page:user-collection,header:user-collection-change-rating-of-release
     */
    moveReleaseInstanceToFolder(oldFolderId: FolderIdsEnum | number, releaseId: number, instanceId: number, newFolderId: FolderIdsEnum | number): Promise<EmptyResponse>;
    /**
     * Remove an instance of a release from authenticated user’s collection folder.
     *
     * @category User
     * @label Delete Instance From Folder
     *
     * @link https://www.discogs.com/developers#page:user-collection,header:user-collection-delete-instance-from-folder
     */
    deleteReleaseInstanceFromFolder(folderId: FolderIdsEnum | number, releaseId: number, instanceId: number): Promise<EmptyResponse>;
    /**
     * Retrieve a list of user-defined collection notes fields. These fields are available on every release in the collection.
     *
     * @remarks
     * If the collection has been made private by its owner, authentication as the collection owner is required.
     * If you are not authenticated as the collection owner, only fields with `public` set to true will be visible.
     *
     * @category User
     * @label List Custom Fields
     *
     * @link https://www.discogs.com/developers#page:user-collection,header:user-collection-list-custom-fields
     */
    listCustomFieldsForUser(username: string): Promise<{
        fields: (({
            type: "dropdown";
            options: string[];
        } & {
            id: number;
            name: string;
            position: number;
            public: boolean;
        }) | ({
            type: "textarea";
            lines: number;
        } & {
            id: number;
            name: string;
            position: number;
            public: boolean;
        }))[];
    }>;
    /**
     * Retrieve a list of authenticated user-defined collection notes fields. These fields are available on every release in the collection.
     *
     * @category User
     * @label List Custom Fields
     *
     * @link https://www.discogs.com/developers#page:user-collection,header:user-collection-list-custom-fields
     */
    listCustomFields(): Promise<{
        fields: (({
            type: "dropdown";
            options: string[];
        } & {
            id: number;
            name: string;
            position: number;
            public: boolean;
        }) | ({
            type: "textarea";
            lines: number;
        } & {
            id: number;
            name: string;
            position: number;
            public: boolean;
        }))[];
    }>;
    /**
     * Change the value of a notes field on a particular instance.
     *
     * @category User
     * @label Edit Fields Instance
     *
     * @link https://www.discogs.com/developers#page:user-collection,header:user-collection-edit-fields-instance
     */
    editCustomFieldForInstance(folderId: FolderIdsEnum | number, releaseId: number, instanceId: number, fieldId: number, value: string): Promise<EmptyResponse>;
    /**
     * Returns the minimum, median, and maximum value of authenticated user’s collection.
     *
     * @requires authentication
     *
     * @category User
     * @label Collection Value
     *
     * @link https://www.discogs.com/developers#page:user-collection,header:user-collection-collection-value
     */
    getCollectionValue(): Promise<{
        maximum: string;
        median: string;
        minimum: string;
    }>;
    /**
     * Returns the list of releases in a user’s wantlist.
     * Basic information about each release is provided, suitable for display in a list.
     * For detailed information, make another API call to fetch the corresponding release.
     *
     * @remarks
     * If the wantlist has been made private by its owner, you must be authenticated as the owner to view it.
     * The `notes` field will be visible if you are authenticated as the wantlist owner.
     *
     * @category User
     * @label Wantlist
     *
     * @link https://www.discogs.com/developers#page:user-wantlist,header:user-wantlist-wantlist
     */
    getWantlistForUser(username: string, pagination?: Pagination): Promise<{
        pagination: {
            items: number;
            page: number;
            pages: number;
            per_page: number;
            urls: {
                first?: string | undefined;
                prev?: string | undefined;
                next?: string | undefined;
                last?: string | undefined;
            };
        };
        wants: {
            rating: number;
            basic_information: {
                resource_url: string;
            } & {
                id: number;
                title: string;
                artists: ({
                    resource_url: string;
                } & {
                    id: number;
                    name: string;
                    anv: string;
                    join: string;
                    role: string;
                    tracks: string;
                })[];
                formats: {
                    name: string;
                    qty: string;
                }[];
                labels: ({
                    resource_url: string;
                } & {
                    id: number;
                    name: string;
                    entity_type: string;
                    entity_type_name: string;
                    catno: string;
                })[];
                year: number;
                cover_image: string;
                thumb: string;
            };
        }[];
    }>;
    /**
     * Returns the list of releases in authenticated user’s wantlist.
     * Basic information about each release is provided, suitable for display in a list.
     * For detailed information, make another API call to fetch the corresponding release.
     *
     * @category User
     * @label Wantlist
     *
     * @link https://www.discogs.com/developers#page:user-wantlist,header:user-wantlist-wantlist
     */
    getWantlist(pagination?: Pagination): Promise<{
        pagination: {
            items: number;
            page: number;
            pages: number;
            per_page: number;
            urls: {
                first?: string | undefined;
                prev?: string | undefined;
                next?: string | undefined;
                last?: string | undefined;
            };
        };
        wants: {
            rating: number;
            basic_information: {
                resource_url: string;
            } & {
                id: number;
                title: string;
                artists: ({
                    resource_url: string;
                } & {
                    id: number;
                    name: string;
                    anv: string;
                    join: string;
                    role: string;
                    tracks: string;
                })[];
                formats: {
                    name: string;
                    qty: string;
                }[];
                labels: ({
                    resource_url: string;
                } & {
                    id: number;
                    name: string;
                    entity_type: string;
                    entity_type_name: string;
                    catno: string;
                })[];
                year: number;
                cover_image: string;
                thumb: string;
            };
        }[];
    }>;
    /**
     * Add a release to authenticated user’s wantlist.
     *
     * @category User
     * @label Add to wantlist
     *
     * @link https://www.discogs.com/developers#page:user-wantlist,header:user-wantlist-add-to-wantlist
     */
    addToWantlist(releaseId: number, notes?: string, rating?: RatingValues): Promise<{
        resource_url: string;
    } & {
        id: number;
        rating: number;
        notes: string;
        basic_information: {
            resource_url: string;
        } & {
            id: number;
            title: string;
            artists: ({
                resource_url: string;
            } & {
                id: number;
                name: string;
                anv: string;
                join: string;
                role: string;
                tracks: string;
            })[];
            formats: {
                name: string;
                qty: string;
            }[];
            labels: ({
                resource_url: string;
            } & {
                id: number;
                name: string;
                entity_type: string;
                entity_type_name: string;
                catno: string;
            })[];
            year: number;
            cover_image: string;
            thumb: string;
        };
    }>;
    /**
     * Remove a release to authenticated user’s wantlist.
     *
     * @category User
     * @label Add to wantlist
     *
     * @link https://www.discogs.com/developers#page:user-wantlist,header:user-wantlist-add-to-wantlist
     */
    removeFromWantlist(releaseId: number): Promise<EmptyResponse>;
    /**
     * Returns user’s lists.
     *
     * @remarks
     * Private lists will only display when authenticated as the owner.
     *
     * @category User
     * @label Lists
     *
     * @link https://www.discogs.com/developers#page:user-lists,header:user-lists-user-lists
     */
    getListsForUser(username: string, pagination?: Pagination): Promise<{
        pagination: {
            items: number;
            page: number;
            pages: number;
            per_page: number;
            urls: {
                first?: string | undefined;
                prev?: string | undefined;
                next?: string | undefined;
                last?: string | undefined;
            };
        };
        lists: ({
            resource_url: string;
        } & {
            id: number;
            name: string;
            description: string;
            public: boolean;
            date_added: string;
            date_changed: string;
            uri: string;
        })[];
    }>;
    /**
     * Returns authenticated user’s lists.
     *
     * @category User
     * @label Lists
     *
     * @link https://www.discogs.com/developers#page:user-lists,header:user-lists-user-lists
     */
    getLists(pagination?: Pagination): Promise<{
        pagination: {
            items: number;
            page: number;
            pages: number;
            per_page: number;
            urls: {
                first?: string | undefined;
                prev?: string | undefined;
                next?: string | undefined;
                last?: string | undefined;
            };
        };
        lists: ({
            resource_url: string;
        } & {
            id: number;
            name: string;
            description: string;
            public: boolean;
            date_added: string;
            date_changed: string;
            uri: string;
        })[];
    }>;
    /**
     * Returns items from a specified list.
     *
     * @remarks
     * Private lists will only display when authenticated as the owner.
     *
     * @category User
     * @label Lists
     *
     * @link https://www.discogs.com/developers#page:user-lists,header:user-lists-user-lists
     */
    getListItems(listId: number): Promise<{
        items: ({
            resource_url: string;
        } & {
            id: number;
            type: SearchTypeEnum;
            display_title: string;
            comment: string;
            uri: string;
            image_url: string;
        })[];
    }>;
    /**
     * Issue a search query to Discogs database.
     *
     * @category Database
     * @label Search
     *
     * @link https://www.discogs.com/developers#page:database,header:database-search
     */
    searchDatabase(options?: SearchOptions, pagination?: Pagination): Promise<{
        pagination: {
            items: number;
            page: number;
            pages: number;
            per_page: number;
            urls: {
                first?: string | undefined;
                prev?: string | undefined;
                next?: string | undefined;
                last?: string | undefined;
            };
        };
        results: ({
            resource_url: string;
        } & {
            id: number;
            type: SearchTypeEnum;
            title: string;
            thumb: string;
            user_data: {
                in_collection: boolean;
                in_wantlist: boolean;
            };
            cover_image: string;
            master_id: number | null;
            master_url: string | null;
            uri: string;
        })[];
    }>;
    /**
     * Search for a release.
     *
     * @category Database
     * @label Search
     *
     * @link https://www.discogs.com/developers#page:database,header:database-search
     */
    searchRelease(query: string, options?: SearchOptions, pagination?: Pagination): Promise<{
        pagination: {
            items: number;
            page: number;
            pages: number;
            per_page: number;
            urls: {
                first?: string | undefined;
                prev?: string | undefined;
                next?: string | undefined;
                last?: string | undefined;
            };
        };
        results: ({
            resource_url: string;
        } & {
            id: number;
            type: SearchTypeEnum;
            title: string;
            thumb: string;
            user_data: {
                in_collection: boolean;
                in_wantlist: boolean;
            };
            cover_image: string;
            master_id: number | null;
            master_url: string | null;
            uri: string;
        })[];
    }>;
    /**
     * Get a release.
     *
     * @category Database
     * @label Release
     *
     * @link https://www.discogs.com/developers#page:database,header:database-release
     */
    getRelease(releaseId: number, currency?: CurrenciesEnum): Promise<{
        resource_url: string;
    } & {
        extraartists?: ({
            resource_url: string;
        } & {
            id: number;
            name: string;
            anv: string;
            join: string;
            role: string;
            tracks: string;
        })[] | undefined;
        genres?: string[] | undefined;
        styles?: string[] | undefined;
        country?: string | undefined;
        notes?: string | undefined;
        released?: string | undefined;
        released_formatted?: string | undefined;
        tracklist?: {
            type_: string;
            title: string;
            position: string;
            duration: string;
        }[] | undefined;
        master_id?: number | undefined;
        master_url?: string | undefined;
        estimated_weight?: number | undefined;
        images?: ({
            resource_url: string;
        } & {
            type: "primary" | "secondary";
            width: number;
            height: number;
            uri: string;
            uri150: string;
        })[] | undefined;
        videos?: {
            title: string;
            description: string;
            duration: number;
            embed: boolean;
            uri: string;
        }[] | undefined;
    } & {
        id: number;
        title: string;
        artists: ({
            resource_url: string;
        } & {
            id: number;
            name: string;
            anv: string;
            join: string;
            role: string;
            tracks: string;
        })[];
        formats: {
            name: string;
            qty: string;
        }[];
        year: number;
        format_quantity: number;
        identifiers: {
            type: string;
            value: string;
        }[];
        labels: ({
            resource_url: string;
        } & {
            id: number;
            name: string;
            entity_type: string;
            entity_type_name: string;
            catno: string;
        })[];
        companies: ({
            resource_url: string;
        } & {
            id: number;
            name: string;
            entity_type: string;
            entity_type_name: string;
            catno: string;
        })[];
        series: ({
            resource_url: string;
        } & {
            id: number;
            name: string;
            entity_type: string;
            entity_type_name: string;
            catno: string;
        })[];
        thumb: string;
        lowest_price: number | null;
        num_for_sale: number;
        date_added: string;
        date_changed: string;
        data_quality: DataQualityEnum;
        status: CommunityStatusesEnum.ACCEPTED;
        community: {
            have: number;
            want: number;
            rating: {
                count: number;
                average: number;
            };
            submitter: {
                resource_url: string;
            } & {
                username: string;
            };
            contributors: ({
                resource_url: string;
            } & {
                username: string;
            })[];
            data_quality: DataQualityEnum;
            status: CommunityStatusesEnum.ACCEPTED;
        };
        uri: string;
    }>;
    /**
     * Retrieves the release’s rating for a given user.
     *
     * @category Database
     * @label Release Rating
     *
     * @link https://www.discogs.com/developers#page:database,header:database-release-rating-by-user
     */
    getReleaseRatingForUser(username: string, releaseId: number): Promise<{
        release_id: number;
        username: string;
        rating: number;
    }>;
    /**
     * Retrieves the release’s rating for the authenticated user.
     *
     * @category Database
     * @label Release Rating
     *
     * @link https://www.discogs.com/developers#page:database,header:database-release-rating-by-user
     */
    getReleaseRating(releaseId: number): Promise<{
        release_id: number;
        username: string;
        rating: number;
    }>;
    /**
     * Updates the release’s rating for the authenticated user.
     *
     * @category Database
     * @label Release Rating
     *
     * @link https://www.discogs.com/developers#page:database,header:database-release-rating-by-user
     */
    updateReleaseRating(releaseId: number, rating: RatingValues): Promise<{
        release_id: number;
        username: string;
        rating: number;
    }>;
    /**
     * Deletes the release’s rating for the authenticated user.
     *
     * @category Database
     * @label Release Rating
     *
     * @link https://www.discogs.com/developers#page:database,header:database-release-rating-by-user
     */
    deleteReleaseRating(releaseId: number): Promise<EmptyResponse>;
    /**
     * Retrieves the community release rating average and count.
     *
     * @category Database
     * @label Community Release Rating
     *
     * @link https://www.discogs.com/developers#page:database,header:database-community-release-rating
     */
    getCommunityReleaseRating(releaseId: number): Promise<{
        release_id: number;
        rating: {
            count: number;
            average: number;
        };
    }>;
    /**
     * Search for a master release.
     *
     * @category Database
     * @label Search
     *
     * @link https://www.discogs.com/developers#page:database,header:database-search
     */
    searchMaster(query: string, options?: SearchOptions, pagination?: Pagination): Promise<{
        pagination: {
            items: number;
            page: number;
            pages: number;
            per_page: number;
            urls: {
                first?: string | undefined;
                prev?: string | undefined;
                next?: string | undefined;
                last?: string | undefined;
            };
        };
        results: ({
            resource_url: string;
        } & {
            id: number;
            type: SearchTypeEnum;
            title: string;
            thumb: string;
            user_data: {
                in_collection: boolean;
                in_wantlist: boolean;
            };
            cover_image: string;
            master_id: number | null;
            master_url: string | null;
            uri: string;
        })[];
    }>;
    /**
     * Get a master release.
     *
     * @category Database
     * @label Master Release
     *
     * @link https://www.discogs.com/developers#page:database,header:database-master-release
     */
    getMaster(masterId: number): Promise<{
        resource_url: string;
    } & {
        id: number;
        main_release: number;
        main_release_url: string;
        versions_url: string;
        title: string;
        artists: ({
            resource_url: string;
        } & {
            id: number;
            name: string;
            anv: string;
            join: string;
            role: string;
            tracks: string;
        })[];
        genres: string[];
        styles: string[];
        year: number;
        tracklist: {
            type_: string;
            title: string;
            position: string;
            duration: string;
        }[];
        lowest_price: number;
        num_for_sale: number;
        data_quality: DataQualityEnum;
        images: ({
            resource_url: string;
        } & {
            type: "primary" | "secondary";
            width: number;
            height: number;
            uri: string;
            uri150: string;
        })[];
        videos: {
            title: string;
            description: string;
            duration: number;
            embed: boolean;
            uri: string;
        }[];
        uri: string;
    }>;
    /**
     * Retrieves a list of all releases that are versions of a master.
     *
     * @category Database
     * @label Master Release Versions
     *
     * @link https://www.discogs.com/developers#page:database,header:database-master-release-versions
     */
    // @TODO: There are a lot of parameters not handled here
    getMasterVersions(masterId: number, pagination?: Pagination): Promise<{
        pagination: {
            items: number;
            page: number;
            pages: number;
            per_page: number;
            urls: {
                first?: string | undefined;
                prev?: string | undefined;
                next?: string | undefined;
                last?: string | undefined;
            };
        };
        versions: ({
            resource_url: string;
        } & {
            id: number;
            title: string;
            format: string;
            major_formats: string[];
            label: string;
            catno: string;
            released: string;
            country: string;
            status: CommunityStatusesEnum.ACCEPTED;
            stats: {
                user: {
                    in_collection: number;
                    in_wantlist: number;
                };
                community: {
                    in_collection: number;
                    in_wantlist: number;
                };
            };
            thumb: string;
        })[];
    }>;
    /**
     * Search for an artist.
     *
     * @category Database
     * @label Search
     *
     * @link https://www.discogs.com/developers#page:database,header:database-search
     */
    searchArtist(query: string, options?: SearchOptions, pagination?: Pagination): Promise<{
        pagination: {
            items: number;
            page: number;
            pages: number;
            per_page: number;
            urls: {
                first?: string | undefined;
                prev?: string | undefined;
                next?: string | undefined;
                last?: string | undefined;
            };
        };
        results: ({
            resource_url: string;
        } & {
            id: number;
            type: SearchTypeEnum;
            title: string;
            thumb: string;
            user_data: {
                in_collection: boolean;
                in_wantlist: boolean;
            };
            cover_image: string;
            master_id: number | null;
            master_url: string | null;
            uri: string;
        })[];
    }>;
    /**
     * Get an artist.
     *
     * @category Database
     * @label Artist
     *
     * @link https://www.discogs.com/developers#page:database,header:database-artist
     */
    getArtist(artistId: number): Promise<{
        resource_url: string;
    } & {
        id: number;
        profile: string;
        data_quality: DataQualityEnum;
        namevariations: string[];
        releases_url: string;
        images: ({
            resource_url: string;
        } & {
            type: "primary" | "secondary";
            width: number;
            height: number;
            uri: string;
            uri150: string;
        })[];
        uri: string;
    } & {
        urls?: string[] | undefined;
    } & {
        members?: ({
            resource_url: string;
        } & {
            id: number;
            name: string;
            active: boolean;
        })[] | undefined;
    }>;
    /**
     * Returns a list of releases and masters associated with an artist.
     *
     * @category Database
     * @label Artist Releases
     *
     * @link https://www.discogs.com/developers#page:database,header:database-artist-releases
     */
    getArtistReleases(artistId: number, sort?: SortOptions<ReleaseSortEnum>, pagination?: Pagination): Promise<{
        pagination: {
            items: number;
            page: number;
            pages: number;
            per_page: number;
            urls: {
                first?: string | undefined;
                prev?: string | undefined;
                next?: string | undefined;
                last?: string | undefined;
            };
        };
        releases: ({
            resource_url: string;
        } & {
            id: number;
            title: string;
            artist: string;
            year: number;
            stats: {
                user: {
                    in_collection: number;
                    in_wantlist: number;
                };
                community: {
                    in_collection: number;
                    in_wantlist: number;
                };
            };
            thumb: string;
        })[];
    }>;
    /**
     * Search for a label.
     *
     * @category Database
     * @label Search
     *
     * @link https://www.discogs.com/developers#page:database,header:database-search
     */
    searchLabel(query: string, options?: SearchOptions, pagination?: Pagination): Promise<{
        pagination: {
            items: number;
            page: number;
            pages: number;
            per_page: number;
            urls: {
                first?: string | undefined;
                prev?: string | undefined;
                next?: string | undefined;
                last?: string | undefined;
            };
        };
        results: ({
            resource_url: string;
        } & {
            id: number;
            type: SearchTypeEnum;
            title: string;
            thumb: string;
            user_data: {
                in_collection: boolean;
                in_wantlist: boolean;
            };
            cover_image: string;
            master_id: number | null;
            master_url: string | null;
            uri: string;
        })[];
    }>;
    /**
     * Get a label.
     *
     * @category Database
     * @label Label
     *
     * @link https://www.discogs.com/developers#page:database,header:database-label
     */
    getLabel(labelId: number): Promise<{
        resource_url: string;
    } & {
        id: number;
        name: string;
        profile: string;
        contact_info: string;
        data_quality: DataQualityEnum;
        sublabels: ({
            resource_url: string;
        } & {
            id: number;
            name: string;
        })[];
        urls: string[];
        releases_url: string;
        images: ({
            resource_url: string;
        } & {
            type: "primary" | "secondary";
            width: number;
            height: number;
            uri: string;
            uri150: string;
        })[];
        uri: string;
    }>;
    /**
     * Returns a list of releases associated with the label.
     *
     * @category Database
     * @label Label Releases
     *
     * @link https://www.discogs.com/developers#page:database,header:database-all-label-releases
     */
    getLabelReleases(labelId: number, pagination?: Pagination): Promise<{
        pagination: {
            items: number;
            page: number;
            pages: number;
            per_page: number;
            urls: {
                first?: string | undefined;
                prev?: string | undefined;
                next?: string | undefined;
                last?: string | undefined;
            };
        };
        releases: ({
            resource_url: string;
        } & {
            id: number;
            title: string;
            artist: string;
            year: number;
            stats: {
                user: {
                    in_collection: number;
                    in_wantlist: number;
                };
                community: {
                    in_collection: number;
                    in_wantlist: number;
                };
            };
            thumb: string;
        } & {
            format: string;
            catno: string;
            status: CommunityStatusesEnum.ACCEPTED;
        })[];
    }>;
    /**
     * Get a seller’s inventory.
     *
     * @remarks
     * If you are not authenticated as the inventory owner, only items that have a status of For Sale will be visible.
     * If you are authenticated as the inventory owner you will get additional weight, format_quantity, external_id, and location keys.
     * If the user is authorized, the listing will contain a `in_cart` boolean field indicating whether or not this listing is in their cart.
     *
     * @category Marketplace
     * @label Inventory
     *
     * @link https://www.discogs.com/developers#page:marketplace,header:marketplace-inventory
     */
    getInventoryForUser(username: string, status?: InventoryStatusesEnum, sort?: SortOptions<InventorySortEnum>, pagination?: Pagination): Promise<{
        pagination: {
            items: number;
            page: number;
            pages: number;
            per_page: number;
            urls: {
                first?: string | undefined;
                prev?: string | undefined;
                next?: string | undefined;
                last?: string | undefined;
            };
        };
        listings: ({
            resource_url: string;
        } & {
            id: number;
            status: ListingStatusesEnum;
            release: {
                resource_url: string;
            } & {
                id: number;
                title: string;
                artist: string;
                description: string;
                format: string;
                year: number;
                images: readonly ({
                    resource_url: string;
                } & {
                    type: "primary" | "secondary";
                    width: number;
                    height: number;
                    uri: string;
                    uri150: string;
                })[];
                catalog_number: string;
                thumbnail: string;
                stats: {
                    user: {
                        in_collection: number;
                        in_wantlist: number;
                    };
                    community: {
                        in_collection: number;
                        in_wantlist: number;
                    };
                };
            };
            seller: {
                resource_url: string;
            } & {
                id: number;
                uid: number;
                username: string;
                avatar_url: string;
                payment: string;
                shipping: string;
                stats: {
                    rating: string;
                    stars: number;
                    total: number;
                };
                url: string;
                html_url: string;
                is_mp2020_seller: boolean;
            };
            price: {
                value?: number | undefined;
                currency?: CurrenciesEnum | undefined;
            };
            original_price: {
                value?: number | undefined;
                curr_id?: number | undefined;
                curr_abbr?: CurrenciesEnum | undefined;
                formatted?: string | undefined;
            } & {
                converted?: {
                    value?: number | undefined;
                    curr_id?: number | undefined;
                    curr_abbr?: CurrenciesEnum | undefined;
                    formatted?: string | undefined;
                } | undefined;
            };
            shipping_price: {
                value?: number | undefined;
                currency?: CurrenciesEnum | undefined;
            };
            original_shipping_price: {
                value?: number | undefined;
                curr_id?: number | undefined;
                curr_abbr?: CurrenciesEnum | undefined;
                formatted?: string | undefined;
            } & {
                converted?: {
                    value?: number | undefined;
                    curr_id?: number | undefined;
                    curr_abbr?: CurrenciesEnum | undefined;
                    formatted?: string | undefined;
                } | undefined;
            };
            allow_offers: boolean;
            ships_from: string;
            posted: string;
            condition: ReleaseConditionsEnum;
            sleeve_condition: SleeveConditionsEnum;
            comments: string;
            audio: boolean;
            uri: string;
        } & {
            in_cart?: boolean | undefined;
        })[];
    }>;
    /**
     * Get authenticated user’s inventory.
     *
     * @category Marketplace
     * @label Inventory
     *
     * @link https://www.discogs.com/developers#page:marketplace,header:marketplace-inventory
     */
    getInventory(status?: InventoryStatusesEnum, sort?: SortOptions<InventorySortEnum>, pagination?: Pagination): Promise<{
        pagination: {
            items: number;
            page: number;
            pages: number;
            per_page: number;
            urls: {
                first?: string | undefined;
                prev?: string | undefined;
                next?: string | undefined;
                last?: string | undefined;
            };
        };
        listings: ({
            resource_url: string;
        } & {
            id: number;
            status: ListingStatusesEnum;
            release: {
                resource_url: string;
            } & {
                id: number;
                title: string;
                artist: string;
                description: string;
                format: string;
                year: number;
                images: readonly ({
                    resource_url: string;
                } & {
                    type: "primary" | "secondary";
                    width: number;
                    height: number;
                    uri: string;
                    uri150: string;
                })[];
                catalog_number: string;
                thumbnail: string;
                stats: {
                    user: {
                        in_collection: number;
                        in_wantlist: number;
                    };
                    community: {
                        in_collection: number;
                        in_wantlist: number;
                    };
                };
            };
            seller: {
                resource_url: string;
            } & {
                id: number;
                uid: number;
                username: string;
                avatar_url: string;
                payment: string;
                shipping: string;
                stats: {
                    rating: string;
                    stars: number;
                    total: number;
                };
                url: string;
                html_url: string;
                is_mp2020_seller: boolean;
            };
            price: {
                value?: number | undefined;
                currency?: CurrenciesEnum | undefined;
            };
            original_price: {
                value?: number | undefined;
                curr_id?: number | undefined;
                curr_abbr?: CurrenciesEnum | undefined;
                formatted?: string | undefined;
            } & {
                converted?: {
                    value?: number | undefined;
                    curr_id?: number | undefined;
                    curr_abbr?: CurrenciesEnum | undefined;
                    formatted?: string | undefined;
                } | undefined;
            };
            shipping_price: {
                value?: number | undefined;
                currency?: CurrenciesEnum | undefined;
            };
            original_shipping_price: {
                value?: number | undefined;
                curr_id?: number | undefined;
                curr_abbr?: CurrenciesEnum | undefined;
                formatted?: string | undefined;
            } & {
                converted?: {
                    value?: number | undefined;
                    curr_id?: number | undefined;
                    curr_abbr?: CurrenciesEnum | undefined;
                    formatted?: string | undefined;
                } | undefined;
            };
            allow_offers: boolean;
            ships_from: string;
            posted: string;
            condition: ReleaseConditionsEnum;
            sleeve_condition: SleeveConditionsEnum;
            comments: string;
            audio: boolean;
            uri: string;
        } & {
            in_cart?: boolean | undefined;
        })[];
    }>;
    /**
     * View the data associated with a listing.
     *
     * @remarks
     * If the authorized user is the listing owner the listing will include the weight, format_quantity, external_id, and location keys.
     * If the user is authorized, the listing will contain a in_cart boolean field indicating whether or not this listing is in their cart.
     *
     * @category Marketplace
     * @label Listing
     *
     * @link https://www.discogs.com/developers#page:marketplace,header:marketplace-listing
     */
    getListing(listingId: number, currency?: CurrenciesEnum): Promise<{
        resource_url: string;
    } & {
        id: number;
        status: ListingStatusesEnum;
        release: {
            resource_url: string;
        } & {
            id: number;
            title: string;
            artist: string;
            description: string;
            format: string;
            year: number;
            images: readonly ({
                resource_url: string;
            } & {
                type: "primary" | "secondary";
                width: number;
                height: number;
                uri: string;
                uri150: string;
            })[];
            catalog_number: string;
            thumbnail: string;
            stats: {
                user: {
                    in_collection: number;
                    in_wantlist: number;
                };
                community: {
                    in_collection: number;
                    in_wantlist: number;
                };
            };
        };
        seller: {
            resource_url: string;
        } & {
            id: number;
            uid: number;
            username: string;
            avatar_url: string;
            payment: string;
            shipping: string;
            stats: {
                rating: string;
                stars: number;
                total: number;
            };
            url: string;
            html_url: string;
            is_mp2020_seller: boolean;
        };
        price: {
            value?: number | undefined;
            currency?: CurrenciesEnum | undefined;
        };
        original_price: {
            value?: number | undefined;
            curr_id?: number | undefined;
            curr_abbr?: CurrenciesEnum | undefined;
            formatted?: string | undefined;
        } & {
            converted?: {
                value?: number | undefined;
                curr_id?: number | undefined;
                curr_abbr?: CurrenciesEnum | undefined;
                formatted?: string | undefined;
            } | undefined;
        };
        shipping_price: {
            value?: number | undefined;
            currency?: CurrenciesEnum | undefined;
        };
        original_shipping_price: {
            value?: number | undefined;
            curr_id?: number | undefined;
            curr_abbr?: CurrenciesEnum | undefined;
            formatted?: string | undefined;
        } & {
            converted?: {
                value?: number | undefined;
                curr_id?: number | undefined;
                curr_abbr?: CurrenciesEnum | undefined;
                formatted?: string | undefined;
            } | undefined;
        };
        allow_offers: boolean;
        ships_from: string;
        posted: string;
        condition: ReleaseConditionsEnum;
        sleeve_condition: SleeveConditionsEnum;
        comments: string;
        audio: boolean;
        uri: string;
    } & {
        in_cart?: boolean | undefined;
    }>;
    /**
     * Edit the data associated with a listing.
     *
     * @remarks
     * If the listing’s status is not For Sale, Draft, or Expired, it cannot be modified – only deleted.
     *
     * @category Marketplace
     * @label Listing
     *
     * @link https://www.discogs.com/developers#page:marketplace,header:marketplace-listing
     */
    editListing(listingId: number, options: ListingOptions, currency?: CurrenciesEnum): Promise<EmptyResponse>;
    /**
     * Permanently remove a listing from the Marketplace.
     *
     * @category Marketplace
     * @label Listing
     *
     * @link https://www.discogs.com/developers#page:marketplace,header:marketplace-listing
     */
    deleteListing(listingId: number): Promise<EmptyResponse>;
    /**
     * Create a Marketplace listing.
     *
     * @category Marketplace
     * @label Listing
     *
     * @link https://www.discogs.com/developers#page:marketplace,header:marketplace-new-listing
     */
    createListing(options: ListingOptions): Promise<{
        resource_url: string;
    } & {
        listing_id: number;
    }>;
    /**
     * View the data associated with an order.
     *
     * @category Marketplace
     * @label Order
     *
     * @link https://www.discogs.com/developers#page:marketplace,header:marketplace-order
     */
    getOrder(orderId: number): Promise<{
        resource_url: string;
    } & {
        id: string;
        status: EditOrderStatusesEnum;
        next_status: EditOrderStatusesEnum[];
        items: {
            id: number;
            release: {
                id: number;
                description: string;
            };
            price: {
                value?: number | undefined;
                currency?: CurrenciesEnum | undefined;
            };
            media_condition: ReleaseConditionsEnum;
            sleeve_condition: SleeveConditionsEnum;
        }[];
        shipping: {
            value?: number | undefined;
            currency?: CurrenciesEnum | undefined;
        } & {
            method: string;
        };
        shipping_address: string;
        additional_instructions: string;
        fee: {
            value?: number | undefined;
            currency?: CurrenciesEnum | undefined;
        };
        total: {
            value?: number | undefined;
            currency?: CurrenciesEnum | undefined;
        };
        seller: {
            resource_url: string;
        } & {
            id: number;
            username: string;
        };
        buyer: {
            resource_url: string;
        } & {
            id: number;
            username: string;
        };
        archived: boolean;
        created: string;
        last_activity: string;
        messages_url: string;
        uri: string;
    }>;
    /**
     * Edit the data associated with an order.
     *
     * @category Marketplace
     * @label Order
     *
     * @link https://www.discogs.com/developers#page:marketplace,header:marketplace-order
     */
    editOrder(orderId: number, status?: EditOrderStatusesEnum, shipping?: number): Promise<{
        resource_url: string;
    } & {
        id: string;
        status: EditOrderStatusesEnum;
        next_status: EditOrderStatusesEnum[];
        items: {
            id: number;
            release: {
                id: number;
                description: string;
            };
            price: {
                value?: number | undefined;
                currency?: CurrenciesEnum | undefined;
            };
            media_condition: ReleaseConditionsEnum;
            sleeve_condition: SleeveConditionsEnum;
        }[];
        shipping: {
            value?: number | undefined;
            currency?: CurrenciesEnum | undefined;
        } & {
            method: string;
        };
        shipping_address: string;
        additional_instructions: string;
        fee: {
            value?: number | undefined;
            currency?: CurrenciesEnum | undefined;
        };
        total: {
            value?: number | undefined;
            currency?: CurrenciesEnum | undefined;
        };
        seller: {
            resource_url: string;
        } & {
            id: number;
            username: string;
        };
        buyer: {
            resource_url: string;
        } & {
            id: number;
            username: string;
        };
        archived: boolean;
        created: string;
        last_activity: string;
        messages_url: string;
        uri: string;
    }>;
    /**
     * Returns a list of the authenticated user’s orders.
     *
     * @category Marketplace
     * @label Order
     *
     * @link https://www.discogs.com/developers#page:marketplace,header:marketplace-list-orders
     */
    listOrders(status?: OrderStatusesEnum, archived?: boolean, sort?: SortOptions<OrderSortEnum>, pagination?: Pagination): Promise<OrdersResponse>;
    /**
     * Returns a list of the order’s messages with the most recent first.
     *
     * @category Marketplace
     * @label Order Messages
     *
     * @link https://www.discogs.com/developers#page:marketplace,header:marketplace-list-order-messages
     */
    listOrderMessages(orderId: number): Promise<{
        pagination: {
            items: number;
            page: number;
            pages: number;
            per_page: number;
            urls: {
                first?: string | undefined;
                prev?: string | undefined;
                next?: string | undefined;
                last?: string | undefined;
            };
        };
        messages: ({
            type: OrderMessageTypesEnum;
            subject: string;
            message: string;
            timestamp: string;
            order: {
                resource_url: string;
            } & {
                id: number;
            };
        } & {
            status_id: number;
            actor: {
                resource_url: string;
            } & {
                username: string;
            };
        } & {
            from: {
                resource_url: string;
            } & {
                id: number;
                username: string;
                avatar_url: string;
            };
        } & {
            original: number;
            new: number;
        } & {
            refund: {
                amount: number;
                order: {
                    resource_url: string;
                } & {
                    id: number;
                };
            };
        })[];
    }>;
    /**
     * Adds a new message to the order’s message log.
     *
     * @remarks
     * When posting a new message, you can simultaneously change the order status.
     * If you do, the message will automatically be prepended with: "Seller changed status from `Old Status` to `New Status`"
     * While message and status are each optional, one or both must be present.
     *
     * @category Marketplace
     * @label Order Messages
     *
     * @link https://www.discogs.com/developers#page:marketplace,header:marketplace-list-order-messages
     */
    sendOrderMessage(orderId: number, message?: string, status?: OrderStatusesEnum): Promise<{
        type: OrderMessageTypesEnum;
        subject: string;
        message: string;
        timestamp: string;
        order: {
            resource_url: string;
        } & {
            id: number;
        };
    } & {
        status_id: number;
        actor: {
            resource_url: string;
        } & {
            username: string;
        };
    } & {
        from: {
            resource_url: string;
        } & {
            id: number;
            username: string;
            avatar_url: string;
        };
    } & {
        original: number;
        new: number;
    } & {
        refund: {
            amount: number;
            order: {
                resource_url: string;
            } & {
                id: number;
            };
        };
    }>;
    /**
     * The Fee resource allows you to quickly calculate the fee for selling an item on the Marketplace.
     *
     * @category Marketplace
     * @label Fee
     *
     * @link https://www.discogs.com/developers#page:marketplace,header:marketplace-fee
     */
    getFee(price: number, currency?: CurrenciesEnum): Promise<{
        value?: number | undefined;
        currency?: CurrenciesEnum | undefined;
    }>;
    /**
     * Retrieve price suggestions for the provided Release ID.
     *
     * @remarks
     * Suggested prices will be denominated in the user’s selling currency.
     *
     * @category Marketplace
     * @label Price Suggestions
     *
     * @link https://www.discogs.com/developers#page:marketplace,header:marketplace-price-suggestions
     */
    getPriceSuggestions(releaseId: number): Promise<{
        "Mint (M)"?: {
            value?: number | undefined;
            currency?: CurrenciesEnum | undefined;
        } | undefined;
        "Near Mint (NM or M-)"?: {
            value?: number | undefined;
            currency?: CurrenciesEnum | undefined;
        } | undefined;
        "Very Good Plus (VG+)"?: {
            value?: number | undefined;
            currency?: CurrenciesEnum | undefined;
        } | undefined;
        "Very Good (VG)"?: {
            value?: number | undefined;
            currency?: CurrenciesEnum | undefined;
        } | undefined;
        "Good Plus (G+)"?: {
            value?: number | undefined;
            currency?: CurrenciesEnum | undefined;
        } | undefined;
        "Good (G)"?: {
            value?: number | undefined;
            currency?: CurrenciesEnum | undefined;
        } | undefined;
        "Fair (F)"?: {
            value?: number | undefined;
            currency?: CurrenciesEnum | undefined;
        } | undefined;
        "Poor (P)"?: {
            value?: number | undefined;
            currency?: CurrenciesEnum | undefined;
        } | undefined;
    }>;
    /**
     * Retrieve marketplace statistics for the provided Release ID.
     *
     * @remarks
     * These statistics reflect the state of the release in the marketplace currently, and include the number of items currently for sale,
     * lowest listed price of any item for sale, and whether the item is blocked for sale in the marketplace.
     *
     *
     * @category Marketplace
     * @label Release Statistics
     *
     * @link https://www.discogs.com/developers#page:marketplace,header:marketplace-release-statistics
     */
    getMarketplaceStatistics(releaseId: number, currency?: CurrenciesEnum): Promise<{
        blocked_from_sale: boolean;
        lowest_price: {
            value?: number | undefined;
            currency?: CurrenciesEnum | undefined;
        } | null;
        num_for_sale: number | null;
    }>;
    /**
     * Retrieve an image retrieved in another response.
     *
     * @requires authentication
     *
     * @category Helpers
     *
     * @link https://www.discogs.com/developers#page:images
     */
    fetchImage(imageUrl: string): Promise<Blob>;
}
declare class AuthError extends Error {
    readonly name: string;
    readonly message: string;
    readonly statusCode: number;
    constructor();
}
declare class DiscogsError extends Error {
    message: string;
    readonly name: string;
    readonly statusCode: number;
    constructor(message: string, code: number);
}
export { DataQualityEnum, CommunityStatusesEnum, ReleaseConditionsEnum, SleeveConditionsEnum, CurrenciesEnum, FolderIdsEnum, InventoryStatusesEnum, InventorySortEnum, ListingStatusesEnum, EditOrderStatusesEnum, OrderStatusesEnum, OrderSortEnum, OrderMessageTypesEnum, ReleaseSortEnum, SearchTypeEnum, UserSortEnum, Discojs, AuthError, DiscogsError, SortOrdersEnum };
